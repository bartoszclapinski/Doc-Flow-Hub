@page
@model DocFlowHub.Web.Pages.Documents.UploadModel
@{
    ViewData["Title"] = "Upload Document";
}

<div class="container page-transition">
    <!-- Enhanced Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-page="/Index">Home</a></li>
            <li class="breadcrumb-item"><a asp-page="./Index">Documents</a></li>
            <li class="breadcrumb-item active" aria-current="page">Upload</li>
        </ol>
    </nav>

    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h1 class="card-title mb-0 h4">
                        <i class="bi bi-cloud-upload me-2"></i>
                        Upload Document
                    </h1>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            @Model.ErrorMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    <form method="post" enctype="multipart/form-data" id="upload-form">
                        <!-- File Upload Section -->
                        <div class="mb-4">
                            <label asp-for="File" class="form-label fw-bold">
                                <i class="bi bi-paperclip me-1"></i> Document File
                            </label>
                            
                            <div class="file-upload-container" id="file-drop-zone">
                                <div class="upload-icon mb-3">
                                    <i class="bi bi-cloud-upload fs-1 text-muted"></i>
                                </div>
                                
                                <input asp-for="File" class="form-control d-none" type="file" id="file-input" 
                                       accept=".pdf,.doc,.docx,.txt,.md,.jpg,.jpeg,.png,.gif" />
                                
                                <div class="upload-text">
                                    <p class="mb-2"><strong>Drag & drop your file here</strong></p>
                                    <p class="text-muted mb-3">or click to browse</p>
                                    <button type="button" class="btn btn-outline-primary" onclick="document.getElementById('file-input').click()">
                                        <i class="bi bi-folder2-open me-1"></i> Choose File
                                    </button>
                                </div>
                                
                                <div class="mt-3">
                                    <small class="text-muted">
                                        <i class="bi bi-info-circle me-1"></i>
                                        Maximum file size: 30MB<br>
                                        Supported formats: PDF, DOC, DOCX, TXT, MD, JPG, PNG, GIF
                                    </small>
                                </div>
                            </div>
                            
                            <div class="selected-file mt-3 d-none" id="selected-file">
                                <div class="alert alert-info">
                                    <i class="bi bi-file-earmark me-2"></i>
                                    <span id="file-name"></span>
                                    <span class="text-muted ms-2" id="file-size"></span>
                                    <button type="button" class="btn btn-sm btn-outline-danger ms-2" onclick="clearFile()">
                                        <i class="bi bi-x"></i> Remove
                                    </button>
                                </div>
                            </div>
                            
                            <span asp-validation-for="File" class="text-danger"></span>
                            
                            <!-- Upload Progress -->
                            <div class="upload-progress mt-3" id="upload-progress">
                                <div class="progress">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                         role="progressbar" style="width: 0%" id="progress-bar">
                                        <span id="progress-text">0%</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Document Metadata -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Title" class="form-label fw-bold">
                                        <i class="bi bi-card-text me-1"></i> Document Title
                                    </label>
                                    <input asp-for="Title" class="form-control" placeholder="Enter document title..." />
                                    <span asp-validation-for="Title" class="text-danger"></span>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">
                                        <i class="bi bi-tags me-1"></i> Categories
                                    </label>
                                    <div class="category-selection">
                                        @if (Model.Categories.Any())
                                        {
                                            <div class="row">
                                                @foreach (var category in Model.Categories)
                                                {
                                                    <div class="col-md-6">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" 
                                                                   name="SelectedCategoryIds" value="@category.Id" id="category-@category.Id">
                                                            <label class="form-check-label" for="category-@category.Id">
                                                                @category.Name
                                                            </label>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <p class="text-muted mb-0">No categories available</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label fw-bold">
                                <i class="bi bi-card-list me-1"></i> Description
                            </label>
                            <textarea asp-for="Description" class="form-control" rows="4" 
                                      placeholder="Enter a brief description of the document..."></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <!-- Team Sharing -->
                        @if (Model.Teams.Any())
                        {
                            <div class="mb-4">
                                <label asp-for="TeamId" class="form-label fw-bold">
                                    <i class="bi bi-people me-1"></i> Share with Team (Optional)
                                </label>
                                <select asp-for="TeamId" class="form-select">
                                    <option value="">Keep private</option>
                                    @foreach (var team in Model.Teams)
                                    {
                                        <option value="@team.Id">@team.Name</option>
                                    }
                                </select>
                            </div>
                        }

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between">
                            <a asp-page="./Index" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left me-1"></i> Cancel
                            </a>
                            
                            <button type="submit" class="btn btn-primary btn-enhanced" id="submit-btn">
                                <i class="bi bi-cloud-upload me-1"></i> Upload Document
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const fileInput = document.getElementById('file-input');
            const dropZone = document.getElementById('file-drop-zone');
            const selectedFileDiv = document.getElementById('selected-file');
            const fileNameSpan = document.getElementById('file-name');
            const fileSizeSpan = document.getElementById('file-size');
            const uploadForm = document.getElementById('upload-form');
            const submitBtn = document.getElementById('submit-btn');
            const progressDiv = document.getElementById('upload-progress');

            // Auto-fill title from filename
            fileInput.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    const file = this.files[0];
                    displaySelectedFile(file);
                    
                    // Auto-fill title if empty
                    const titleInput = document.querySelector('input[name="Title"]');
                    if (!titleInput.value) {
                        const fileName = file.name.replace(/\.[^/.]+$/, ""); // Remove extension
                        titleInput.value = fileName;
                    }
                }
            });

            // Drag and drop functionality
            dropZone.addEventListener('dragover', function(e) {
                e.preventDefault();
                e.stopPropagation();
                this.classList.add('dragover');
            });

            dropZone.addEventListener('dragleave', function(e) {
                e.preventDefault();
                e.stopPropagation();
                this.classList.remove('dragover');
            });

            dropZone.addEventListener('drop', function(e) {
                e.preventDefault();
                e.stopPropagation();
                this.classList.remove('dragover');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    fileInput.files = files;
                    displaySelectedFile(files[0]);
                    
                    // Auto-fill title
                    const titleInput = document.querySelector('input[name="Title"]');
                    if (!titleInput.value) {
                        const fileName = files[0].name.replace(/\.[^/.]+$/, "");
                        titleInput.value = fileName;
                    }
                }
            });

            // Click to select file
            dropZone.addEventListener('click', function() {
                fileInput.click();
            });

            function displaySelectedFile(file) {
                fileNameSpan.textContent = file.name;
                fileSizeSpan.textContent = formatFileSize(file.size);
                selectedFileDiv.classList.remove('d-none');
                
                // Show success state
                fileInput.classList.add('field-success');
                
                // Show toast notification
                if (window.DocFlowHub) {
                    window.DocFlowHub.showSuccess('File selected: ' + file.name);
                }
            }

            // File validation
            fileInput.addEventListener('change', function() {
                const file = this.files[0];
                if (file) {
                    // Check file size (30MB limit)
                    if (file.size > 30 * 1024 * 1024) {
                        this.classList.add('field-error');
                        if (window.DocFlowHub) {
                            window.DocFlowHub.showError('File size must be less than 30MB');
                        }
                        return;
                    }
                    
                    // Check file type
                    const allowedTypes = ['.pdf', '.doc', '.docx', '.txt', '.md', '.jpg', '.jpeg', '.png', '.gif'];
                    const fileExt = '.' + file.name.split('.').pop().toLowerCase();
                    
                    if (!allowedTypes.includes(fileExt)) {
                        this.classList.add('field-error');
                        if (window.DocFlowHub) {
                            window.DocFlowHub.showError('File type not supported');
                        }
                        return;
                    }
                    
                    this.classList.remove('field-error');
                    this.classList.add('field-success');
                }
            });

            // Enhanced form submission
            uploadForm.addEventListener('submit', function(e) {
                if (!fileInput.files || fileInput.files.length === 0) {
                    e.preventDefault();
                    if (window.DocFlowHub) {
                        window.DocFlowHub.showError('Please select a file to upload');
                    }
                    return;
                }
                
                // Show progress bar
                progressDiv.classList.add('show');
                submitBtn.disabled = true;
                
                // Simulate progress (you can replace with actual upload progress)
                simulateUploadProgress();
            });

            function simulateUploadProgress() {
                let progress = 0;
                const progressBar = document.getElementById('progress-bar');
                const progressText = document.getElementById('progress-text');
                
                const interval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    
                    progressBar.style.width = progress + '%';
                    progressText.textContent = Math.round(progress) + '%';
                    
                    if (progress >= 90) {
                        clearInterval(interval);
                        progressBar.style.width = '100%';
                        progressText.textContent = 'Processing...';
                    }
                }, 200);
            }

            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            // Real-time form validation feedback
            const inputs = document.querySelectorAll('input, textarea, select');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.checkValidity()) {
                        this.classList.remove('field-error');
                        this.classList.add('field-success');
                    } else {
                        this.classList.remove('field-success');
                        this.classList.add('field-error');
                    }
                });
            });
        });

        function clearFile() {
            const fileInput = document.getElementById('file-input');
            const selectedFileDiv = document.getElementById('selected-file');
            
            fileInput.value = '';
            selectedFileDiv.classList.add('d-none');
            fileInput.classList.remove('field-success', 'field-error');
            
            if (window.DocFlowHub) {
                window.DocFlowHub.showInfo('File selection cleared');
            }
        }
    </script>
} 