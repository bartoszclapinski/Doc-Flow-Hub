@page
@using DocFlowHub.Web.Extensions
@model DocFlowHub.Web.Pages.Documents.IndexModel
@{
    ViewData["Title"] = "Documents";
}

<div class="container-fluid py-4 page-transition">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-1">
                        <i class="bi bi-file-earmark-text me-2 text-primary"></i>
                        Documents
                    </h1>
                    <p class="text-muted mb-0">Manage and organize your documents</p>
                </div>
                <div>
                    <a asp-page="./Upload" class="btn btn-primary">
                        <i class="bi bi-cloud-upload me-1"></i>Upload Document
                    </a>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-circle me-2"></i>@Model.ErrorMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            </div>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="bi bi-check-circle me-2"></i>@TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            </div>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            </div>
        </div>
    }

    <!-- Filters Section - Top Layout -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm azure-filter-panel">
                <div class="card-body">
                    <form method="get">
                        <div class="row g-3 align-items-end">
                            <!-- Search -->
                            <div class="col-md-4">
                                <label asp-for="Filter.SearchTerm" class="form-label small fw-semibold text-muted">
                                    <i class="bi bi-search me-1"></i>Search Documents
                                </label>
                                <input asp-for="Filter.SearchTerm" class="form-control" 
                                       placeholder="Search by title, description...">
                            </div>

                            <!-- Team Filter -->
                            @if (Model.UserTeams != null && Model.UserTeams.Any())
                            {
                                <div class="col-md-3">
                                    <label asp-for="Filter.TeamId" class="form-label small fw-semibold text-muted">
                                        <i class="bi bi-building me-1"></i>Workspace
                                    </label>
                                    <select asp-for="Filter.TeamId" class="form-select">
                                        <option value="">All Documents</option>
                                        <option value="0" selected="@(Model.Filter.TeamId == 0)">My Private Documents</option>
                                        @foreach (var team in Model.UserTeams)
                                        {
                                            <option value="@team.Id" selected="@(Model.Filter.TeamId == team.Id)">
                                                @team.Name (@team.MemberCount members)
                                            </option>
                                        }
                                    </select>
                                </div>
                            }

                            <!-- Categories -->
                            @if (Model.Categories != null && Model.Categories.Any())
                            {
                                <div class="col-md-3">
                                    <label class="form-label small fw-semibold text-muted">
                                        <i class="bi bi-tags me-1"></i>Category
                                    </label>
                                    <select asp-for="Filter.CategoryId" class="form-select">
                                        <option value="">All Categories</option>
                                        @foreach (var category in Model.Categories)
                                        {
                                            <option value="@category.Id" selected="@(Model.Filter.CategoryId == category.Id)">
                                                @category.Name
                                            </option>
                                        }
                                    </select>
                                </div>
                            }

                            <!-- Project Filter -->
                            <div class="col-md-3">
                                <label asp-for="ProjectId" class="form-label small fw-semibold text-muted">
                                    <i class="bi bi-kanban me-1"></i>Project
                                </label>
                                <select asp-for="ProjectId" asp-items="Model.ProjectSelectList" class="form-select" onchange="this.form.submit();">
                                    <option value="">All Projects</option>
                                    <option value="0" selected="@(Model.ProjectId == 0)">Unassigned</option>
                                </select>
                            </div>

                            <!-- Folder Filter -->
                            <div class="col-md-3">
                                <label asp-for="FolderId" class="form-label small fw-semibold text-muted">
                                    <i class="bi bi-folder me-1"></i>Folder
                                </label>
                                <select asp-for="FolderId" asp-items="Model.FolderSelectList" class="form-select"></select>
                            </div>

                            <!-- Filter Actions -->
                            <div class="col-md-2">
                                <div class="d-flex gap-2">
                                    <button type="submit" class="btn btn-primary flex-fill">
                                        <i class="bi bi-search me-1"></i>Apply
                                    </button>
                                    <a asp-page="./Index" class="btn btn-outline-secondary flex-fill">
                                        <i class="bi bi-arrow-clockwise me-1"></i>Clear
                                    </a>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Documents List -->
    <div class="row">
        <div class="col-12">
            @if (!Model.Documents.Items.Any())
            {
                <div class="azure-empty-state text-center py-5">
                    <div class="mb-4">
                        <i class="bi bi-file-earmark-text text-muted" style="font-size: 3rem;"></i>
                    </div>
                    <h5 class="text-muted">No documents found</h5>
                    <p class="text-muted mb-4">Try adjusting your filters or upload your first document</p>
                    <a asp-page="./Upload" class="btn btn-primary">
                        <i class="bi bi-cloud-upload me-1"></i>Upload Document
                    </a>
                </div>
            }
            else
            {
                                 <!-- Results Info -->
                 <div class="d-flex justify-content-between align-items-center mb-3">
                     <div class="text-muted small">
                         Showing @Model.Documents.Items.Count() of @Model.Documents.TotalItems documents
                     </div>
                     <div class="text-muted small">
                         Page @Model.Documents.PageNumber of @Model.Documents.TotalPages
                     </div>
                 </div>

                <!-- Bulk Action Bar -->
                <div id="bulkActionBar" class="card mb-3 d-none border-warning bulk-action-bar">
                    <div class="card-body py-2 bg-warning-subtle">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-check-circle text-warning me-2"></i>
                                <span id="selectedCount" class="fw-medium">0 documents selected</span>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="button" id="clearSelectionBtn" class="btn btn-sm btn-outline-secondary">
                                    <i class="bi bi-x-lg me-1"></i>Clear Selection
                                </button>
                                <button type="button" id="bulkDeleteBtn" class="btn btn-sm btn-danger">
                                    <i class="bi bi-trash me-1"></i>Delete Selected
                                </button>
                                <button type="button" id="bulkMoveBtn" class="btn btn-sm btn-primary">
                                    <i class="bi bi-arrows-angle-right me-1"></i>Move Selected
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Documents Table -->
                <div class="card border-0 shadow-sm azure-table-container">
                    <table class="table table-hover azure-table mb-0">
                            <thead class="table-light">
                                <tr>
                                    <!-- Selection Column -->
                                    <th scope="col" class="border-0 py-3" style="width: 50px;">
                                        <input type="checkbox" id="selectAll" class="form-check-input" title="Select all documents">
                                    </th>
                                                                <th scope="col" class="border-0 fw-semibold text-muted small text-uppercase sortable" style="width: 42%;">
                                <a href="@Model.GetSortUrl("Title", ViewData["TitleSortDirection"]?.ToString() ?? "asc")" class="text-decoration-none text-muted">
                                    <i class="bi bi-file-earmark me-1"></i>Document
                                    @if (ViewData["CurrentSort"]?.ToString() == "Title")
                                    {
                                        <i class="bi bi-caret-@(ViewData["TitleSortDirection"]?.ToString() == "desc" ? "down" : "up")-fill ms-1"></i>
                                    }
                                </a>
                            </th>
                                    <th scope="col" class="border-0 fw-semibold text-muted small text-uppercase d-none d-md-table-cell" style="width: 15%;">
                                        <i class="bi bi-building me-1"></i>Workspace
                                    </th>
                                                                <th scope="col" class="border-0 fw-semibold text-muted small text-uppercase sortable d-none d-lg-table-cell" style="width: 20%;">
                                <a href="@Model.GetSortUrl("UpdatedAt", ViewData["UpdatedAtSortDirection"]?.ToString() ?? "desc")" class="text-decoration-none text-muted">
                                    <i class="bi bi-clock me-1"></i>Modified
                                    @if (ViewData["CurrentSort"]?.ToString() == "UpdatedAt")
                                    {
                                        <i class="bi bi-caret-@(ViewData["UpdatedAtSortDirection"]?.ToString() == "desc" ? "down" : "up")-fill ms-1"></i>
                                    }
                                </a>
                            </th>
                                                                <th scope="col" class="border-0 fw-semibold text-muted small text-uppercase sortable d-none d-xl-table-cell" style="width: 10%;">
                                <a href="@Model.GetSortUrl("FileSize", ViewData["FileSizeSortDirection"]?.ToString() ?? "desc")" class="text-decoration-none text-muted">
                                    <i class="bi bi-hdd me-1"></i>Size
                                    @if (ViewData["CurrentSort"]?.ToString() == "FileSize")
                                    {
                                        <i class="bi bi-caret-@(ViewData["FileSizeSortDirection"]?.ToString() == "desc" ? "down" : "up")-fill ms-1"></i>
                                    }
                                </a>
                            </th>
                                    <th scope="col" class="border-0 fw-semibold text-muted small text-uppercase text-end" style="width: 10%;">
                                        Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var document in Model.Documents.Items)
                                {
                                    <tr class="azure-table-row">
                                        <!-- Document Selection -->
                                        <td class="border-0 py-3">
                                            <input type="checkbox" class="form-check-input document-checkbox" 
                                                   value="@document.Id" data-title="@document.Title" data-size="@FormatFileSize(document.FileSize)" data-date="@document.CreatedAt.ToString("MMM dd, yyyy")">
                                        </td>
                                        <!-- Document Info -->
                                        <td class="border-0 py-3">
                                            <div class="d-flex align-items-center">
                                                <div class="me-3 flex-shrink-0">
                                                    <i class="bi @GetFileIcon(document.FileType) text-primary fs-4"></i>
                                                </div>
                                                <div class="flex-grow-1 min-width-0">
                                                    <div class="fw-semibold text-dark mb-1 text-truncate">@document.Title</div>
                                                    @if (!string.IsNullOrEmpty(document.Description))
                                                    {
                                                        <div class="text-muted small text-truncate">
                                                            @(document.Description.Length > 80 ? document.Description.Substring(0, 80) + "..." : document.Description)
                                                        </div>
                                                    }
                                                    <!-- Mobile-only info -->
                                                    <div class="d-md-none mt-1">
                                                        @if (!string.IsNullOrEmpty(document.TeamName))
                                                        {
                                                            <span class="badge bg-success-subtle text-success me-2">
                                                                <i class="bi bi-people me-1"></i>@document.TeamName
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-secondary-subtle text-secondary me-2">
                                                                <i class="bi bi-lock me-1"></i>Private
                                                            </span>
                                                        }
                                                        <small class="text-muted">@((document.UpdatedAt ?? document.CreatedAt).ToString("MMM dd"))</small>
                                                    </div>
                                                    @if (document.Categories != null && document.Categories.Any())
                                                    {
                                                        <div class="mt-1">
                                                            @foreach (var category in document.Categories.Take(2))
                                                            {
                                                                <span class="badge bg-primary-subtle text-primary me-1 small">@category.Name</span>
                                                            }
                                                            @if (document.Categories.Count > 2)
                                                            {
                                                                <span class="badge bg-light text-muted small">+@(document.Categories.Count - 2)</span>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </td>

                                        <!-- Workspace -->
                                        <td class="border-0 py-3 d-none d-md-table-cell">
                                            @if (!string.IsNullOrEmpty(document.TeamName))
                                            {
                                                <span class="badge bg-success-subtle text-success workspace-badge" title="@document.TeamName">
                                                    <i class="bi bi-people me-1"></i>@(document.TeamName.Length > 12 ? document.TeamName.Substring(0, 12) + "..." : document.TeamName)
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary-subtle text-secondary">
                                                    <i class="bi bi-lock me-1"></i>Private
                                                </span>
                                            }
                                        </td>

                                        <!-- Modified -->
                                        <td class="border-0 py-3 d-none d-lg-table-cell">
                                            <div class="text-muted small">@((document.UpdatedAt ?? document.CreatedAt).ToString("MMM dd, yyyy"))</div>
                                            <div class="text-muted small">by @document.OwnerName</div>
                                        </td>

                                        <!-- Size -->
                                        <td class="border-0 py-3 d-none d-xl-table-cell">
                                            <div class="text-muted small">@FormatFileSize(document.FileSize)</div>
                                            <div class="text-muted small">@document.FileType.ToUpper()</div>
                                        </td>

                                        <!-- Actions -->
                                        <td class="border-0 py-3 text-end">
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                    <i class="bi bi-three-dots"></i>
                                                </button>
                                                <ul class="dropdown-menu dropdown-menu-end">
                                                    <li>
                                                        <a class="dropdown-item" asp-page="./Details" asp-route-id="@document.Id">
                                                            <i class="bi bi-eye me-2"></i>View Details
                                                        </a>
                                                    </li>
                                                    @if (document.OwnerId == User.GetUserId())
                                                    {
                                                        <li>
                                                            <a class="dropdown-item" asp-page="./Edit" asp-route-id="@document.Id">
                                                                <i class="bi bi-pencil me-2"></i>Edit
                                                            </a>
                                                        </li>
                                                        <li>
                                                            <button type="button" class="dropdown-item text-danger" 
                                                                                onclick="confirmDeleteDocument(@document.Id, @Html.Raw(Json.Serialize(document.Title)), '@FormatFileSize(document.FileSize)', '@document.CreatedAt.ToString("MMM dd, yyyy")')">
                                                                <i class="bi bi-trash me-2"></i>Delete
                                                            </button>
                                                        </li>
                                                        <li>
                                                            <button type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#moveModal" data-document-id="@document.Id">
                                                                <i class="bi bi-arrows-angle-right me-2"></i>Move
                                                            </button>
                                                        </li>
                                                    }
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li>
                                                        <form method="post" asp-page-handler="Download" asp-route-documentId="@document.Id" class="d-inline">
                                                            <button type="submit" class="dropdown-item text-success">
                                                                <i class="bi bi-download me-2"></i>Download
                                                            </button>
                                                        </form>
                                                    </li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                                         </tbody>
                         </table>
                 </div>

                <!-- Pagination -->
                @if (Model.Documents.TotalPages > 1)
                {
                    <nav aria-label="Page navigation" class="mt-4">
                        <ul class="pagination justify-content-center">
                            @if (Model.Documents.PageNumber > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-page="./Index" asp-route-pageNumber="@(Model.Documents.PageNumber - 1)">
                                        <i class="bi bi-chevron-left"></i>
                                    </a>
                                </li>
                            }
                            
                            @for (var i = Math.Max(1, Model.Documents.PageNumber - 2); i <= Math.Min(Model.Documents.TotalPages, Model.Documents.PageNumber + 2); i++)
                            {
                                <li class="page-item @(i == Model.Documents.PageNumber ? "active" : "")">
                                    <a class="page-link" asp-page="./Index" asp-route-pageNumber="@i">@i</a>
                                </li>
                            }
                            
                            @if (Model.Documents.PageNumber < Model.Documents.TotalPages)
                            {
                                <li class="page-item">
                                    <a class="page-link" asp-page="./Index" asp-route-pageNumber="@(Model.Documents.PageNumber + 1)">
                                        <i class="bi bi-chevron-right"></i>
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
</div>

<!-- Bulk Delete Confirmation Modal -->
<div class="modal fade" id="bulkDeleteModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-danger">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Confirm Bulk Document Deletion
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger">
                    <i class="bi bi-warning me-2"></i>
                    <strong>This action cannot be undone!</strong>
                </div>
                
                <p>Are you sure you want to delete <strong><span id="bulkDeleteCount"></span></strong> documents?</p>
                
                <div class="card bg-light">
                    <div class="card-header">
                        <h6 class="mb-0">Documents to be deleted:</h6>
                    </div>
                    <div class="card-body" style="max-height: 300px; overflow-y: auto;">
                        <div id="bulkDeleteList"></div>
                    </div>
                </div>
                
                <div id="bulkDeleteProgress" class="d-none mt-3">
                    <div class="progress">
                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                    </div>
                    <small class="text-muted mt-1">
                        <span id="bulkProgressText">Preparing deletion...</span>
                    </small>
                </div>
                
                <p class="text-muted small mt-3">This will:</p>
                <ul class="text-muted small">
                    <li>Move the selected documents to deleted items</li>
                    <li>Remove them from any team sharing</li>
                    <li>Stop all related notifications</li>
                    <li>Only delete documents that you own</li>
                </ul>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-lg me-1"></i>Cancel
                </button>
                <button type="button" id="confirmBulkDelete" class="btn btn-danger">
                    <span class="spinner-border spinner-border-sm d-none me-2" role="status"></span>
                    <i class="bi bi-trash me-1"></i>
                    <span class="btn-text">Delete All Documents</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-danger">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Confirm Document Deletion
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger">
                    <i class="bi bi-warning me-2"></i>
                    <strong>This action cannot be undone!</strong>
                </div>
                
                <p>Are you sure you want to delete this document?</p>
                
                <div class="card bg-light">
                    <div class="card-body">
                        <h6 class="card-title mb-2" id="deleteDocumentTitle"></h6>
                        <div class="row text-muted small">
                            <div class="col-6">
                                <strong>Size:</strong> <span id="deleteDocumentSize"></span>
                            </div>
                            <div class="col-6">
                                <strong>Created:</strong> <span id="deleteDocumentDate"></span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <p class="text-muted small mt-3">This will:</p>
                <ul class="text-muted small">
                    <li>Move the document to deleted items (soft delete)</li>
                    <li>Remove the document from team sharing</li>
                    <li>Preserve all version history</li>
                    <li>Allow restoration by admins if needed</li>
                </ul>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-lg me-1"></i>Cancel
                </button>
                <form method="post" asp-page-handler="Delete" class="d-inline" id="deleteForm">
                    <input type="hidden" id="deleteDocumentId" name="documentId" />
                    <button type="submit" class="btn btn-danger loading-btn">
                        <span class="spinner-border spinner-border-sm d-none me-2" role="status"></span>
                        <i class="bi bi-trash me-1"></i>
                        <span class="btn-text">Delete Document</span>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Move Document Modal -->
<div class="modal fade" id="moveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">
                    <i class="bi bi-arrows-angle-right me-2"></i>Move Document
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="moveDocumentId" />
                <div class="mb-3">
                    <label class="form-label small fw-semibold text-muted"><i class="bi bi-kanban me-1"></i>Project</label>
                    <select id="moveProjectSelect" class="form-select">
                        <option value="">Keep current</option>
                        <option value="0">Unassigned</option>
                        @foreach (var project in Model.Projects)
                        {
                            <option value="@project.Id">@project.Name</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label small fw-semibold text-muted"><i class="bi bi-folder me-1"></i>Folder (optional)</label>
                    <select id="moveFolderSelect" class="form-select">
                        <option value="">None</option>
                        @foreach (var folder in Model.Folders)
                        {
                            <option value="@folder.Id">@folder.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="bi bi-x me-1"></i>Cancel</button>
                <button type="button" id="confirmMoveBtn" class="btn btn-primary"><span class="spinner-border spinner-border-sm d-none me-2" role="status"></span><i class="bi bi-arrows-angle-right me-1"></i><span class="btn-text">Move</span></button>
            </div>
        </div>
    </div>
</div>

@functions {
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }

    private string GetFileIcon(string fileType)
    {
        return fileType.ToLower() switch
        {
            ".pdf" => "bi-file-earmark-pdf",
            ".doc" or ".docx" => "bi-file-earmark-word",
            ".txt" => "bi-file-earmark-text",
            ".md" => "bi-markdown",
            ".jpg" or ".jpeg" or ".png" or ".gif" => "bi-file-earmark-image",
            _ => "bi-file-earmark"
        };
    }
}

@section Scripts {
    <script>
        // Confirm delete document function
        function confirmDeleteDocument(documentId, title, size, createdDate) {
            // Populate modal with document details
            document.getElementById('deleteDocumentId').value = documentId;
            document.getElementById('deleteDocumentTitle').textContent = title;
            document.getElementById('deleteDocumentSize').textContent = size;
            document.getElementById('deleteDocumentDate').textContent = createdDate;
            
            // Show the modal
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            deleteModal.show();
        }

        // Initialize bulk selection functionality
        function initializeBulkSelection() {
            const selectAllCheckbox = document.getElementById('selectAll');
            const documentCheckboxes = document.querySelectorAll('.document-checkbox');
            const bulkActionBar = document.getElementById('bulkActionBar');
            const selectedCountSpan = document.getElementById('selectedCount');
            const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
            const clearSelectionBtn = document.getElementById('clearSelectionBtn');

            // Select All/None functionality
            selectAllCheckbox.addEventListener('change', function() {
                documentCheckboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
                updateBulkActionBar();
            });

            // Individual checkbox change handling
            documentCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', updateBulkActionBar);
            });

            // Clear Selection button
            clearSelectionBtn.addEventListener('click', function() {
                documentCheckboxes.forEach(checkbox => {
                    checkbox.checked = false;
                });
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
                updateBulkActionBar();
            });

            // Bulk Delete button
            bulkDeleteBtn.addEventListener('click', function() {
                const selectedCheckboxes = document.querySelectorAll('.document-checkbox:checked');
                const selectedDocuments = Array.from(selectedCheckboxes).map(checkbox => ({
                    id: checkbox.value,
                    title: checkbox.dataset.title,
                    size: checkbox.dataset.size,
                    date: checkbox.dataset.date
                }));
                
                if (selectedDocuments.length > 0) {
                    showBulkDeleteModal(selectedDocuments);
                }
            });

            // Update bulk action bar visibility and state
            function updateBulkActionBar() {
                const selectedCheckboxes = document.querySelectorAll('.document-checkbox:checked');
                const count = selectedCheckboxes.length;
                const totalCheckboxes = documentCheckboxes.length;
                
                if (count > 0) {
                    bulkActionBar.classList.remove('d-none');
                    selectedCountSpan.textContent = `${count} document${count > 1 ? 's' : ''} selected`;
                } else {
                    bulkActionBar.classList.add('d-none');
                }
                
                // Update "Select All" checkbox state
                if (count === 0) {
                    selectAllCheckbox.checked = false;
                    selectAllCheckbox.indeterminate = false;
                } else if (count === totalCheckboxes) {
                    selectAllCheckbox.checked = true;
                    selectAllCheckbox.indeterminate = false;
                } else {
                    selectAllCheckbox.checked = false;
                    selectAllCheckbox.indeterminate = true;
                }
            }
        }

        // Show bulk delete modal function
        function showBulkDeleteModal(selectedDocuments) {
            if (!selectedDocuments || selectedDocuments.length === 0) return;
            
            // Update count
            document.getElementById('bulkDeleteCount').textContent = 
                `${selectedDocuments.length} document${selectedDocuments.length > 1 ? 's' : ''}`;
            
            // Build document list
            const listContainer = document.getElementById('bulkDeleteList');
            listContainer.innerHTML = selectedDocuments.map(doc => `
                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                    <div class="flex-grow-1 min-width-0">
                        <div class="fw-medium text-truncate">${escapeHtml(doc.title)}</div>
                        <div class="small text-muted">${doc.size} • Created ${doc.date}</div>
                    </div>
                    <div class="text-end ms-2">
                        <i class="bi bi-file-earmark text-muted"></i>
                    </div>
                </div>
            `).join('');
            
            // Reset modal state
            document.getElementById('bulkDeleteProgress').classList.add('d-none');
            const confirmBtn = document.getElementById('confirmBulkDelete');
            const spinner = confirmBtn.querySelector('.spinner-border');
            const btnText = confirmBtn.querySelector('.btn-text');
            const icon = confirmBtn.querySelector('.bi');
            
            confirmBtn.disabled = false;
            spinner.classList.add('d-none');
            icon.classList.remove('d-none');
            btnText.textContent = `Delete All Documents`;
            
            // Store selected documents for confirm handler
            window.bulkDeleteDocuments = selectedDocuments;
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('bulkDeleteModal'));
            modal.show();
        }

        // Escape HTML helper function
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Dynamic UI update after bulk delete
        function updateUIAfterBulkDelete(result) {
            // Remove successfully deleted document rows with animation
            result.results.forEach(item => {
                if (item.success) {
                    const checkbox = document.querySelector(`.document-checkbox[value="${item.documentId}"]`);
                    if (checkbox) {
                        const row = checkbox.closest('tr');
                        if (row) {
                            // Add fade-out animation
                            row.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                            row.style.opacity = '0';
                            row.style.transform = 'translateX(-20px)';
                            
                            // Remove row after animation
                            setTimeout(() => {
                                row.remove();
                                
                                // Check if table is now empty
                                const remainingRows = document.querySelectorAll('.azure-table-row');
                                if (remainingRows.length === 0) {
                                    showEmptyState();
                                }
                            }, 500);
                        }
                    }
                }
            });

            // Reset bulk selection state
            setTimeout(() => {
                clearAllSelections();
                
                // Show success toast message
                showSuccessToast(result);
            }, 100);
        }

        // Clear all selections and hide bulk action bar
        function clearAllSelections() {
            const selectAllCheckbox = document.getElementById('selectAll');
            const documentCheckboxes = document.querySelectorAll('.document-checkbox');
            const bulkActionBar = document.getElementById('bulkActionBar');
            
            if (selectAllCheckbox) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
            }
            
            documentCheckboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            
            if (bulkActionBar) {
                bulkActionBar.classList.add('d-none');
            }
        }

        // Show empty state when no documents remain
        function showEmptyState() {
            const tableContainer = document.querySelector('.azure-table-container');
            if (tableContainer) {
                tableContainer.innerHTML = `
                    <div class="azure-empty-state text-center">
                        <div class="mb-4">
                            <i class="bi bi-inbox display-1 text-muted"></i>
                        </div>
                        <h4 class="text-muted mb-3">No documents found</h4>
                        <p class="text-muted mb-4">All documents have been successfully deleted.</p>
                        <a asp-page="./Upload" class="btn btn-primary">
                            <i class="bi bi-cloud-upload me-2"></i>Upload New Document
                        </a>
                    </div>
                `;
            }
        }

        // Show success toast notification
        function showSuccessToast(result) {
            // Create toast element
            const toastHtml = `
                <div class="toast align-items-center text-white bg-success border-0 position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999;" role="alert">
                    <div class="d-flex">
                        <div class="toast-body">
                            <i class="bi bi-check-circle me-2"></i>
                            ${getSuccessMessage(result)}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" 
                                data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;
            
            // Add toast to page
            document.body.insertAdjacentHTML('beforeend', toastHtml);
            
            // Initialize and show toast
            const toastElement = document.body.lastElementChild;
            const toast = new bootstrap.Toast(toastElement, { delay: 4000 });
            toast.show();
            
            // Remove toast element after hiding
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }

        // Get appropriate success message
        function getSuccessMessage(result) {
            if (result.isFullySuccessful) {
                return `Successfully deleted ${result.successfulDeletions} document${result.successfulDeletions > 1 ? 's' : ''}!`;
            } else if (result.hasPartialFailure) {
                return `Partially successful: ${result.successfulDeletions} of ${result.totalRequested} documents deleted.`;
            } else {
                return 'Bulk delete operation completed.';
            }
        }

        // Initialize dropdown z-index management
        function initializeDropdownZIndex() {
            const dropdowns = document.querySelectorAll('.dropdown');
            
            dropdowns.forEach(dropdown => {
                const toggle = dropdown.querySelector('.dropdown-toggle');
                const row = dropdown.closest('.azure-table-row');
                
                if (toggle && row) {
                    toggle.addEventListener('shown.bs.dropdown', function() {
                        row.classList.add('dropdown-open');
                    });
                    
                    toggle.addEventListener('hidden.bs.dropdown', function() {
                        row.classList.remove('dropdown-open');
                    });
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize bulk selection system
            initializeBulkSelection();
            
            // Fix dropdown z-index by managing open state
            initializeDropdownZIndex();
            
            // Handle bulk delete confirmation
            document.getElementById('confirmBulkDelete').addEventListener('click', async function() {
                const documentsToDelete = window.bulkDeleteDocuments;
                if (!documentsToDelete || documentsToDelete.length === 0) return;
                
                // Show loading state
                const confirmBtn = this;
                const spinner = confirmBtn.querySelector('.spinner-border');
                const btnText = confirmBtn.querySelector('.btn-text');
                const icon = confirmBtn.querySelector('.bi');
                
                confirmBtn.disabled = true;
                spinner.classList.remove('d-none');
                icon.classList.add('d-none');
                btnText.textContent = 'Deleting...';
                
                // Show progress bar
                const progressDiv = document.getElementById('bulkDeleteProgress');
                const progressBar = progressDiv.querySelector('.progress-bar');
                const progressText = document.getElementById('bulkProgressText');
                progressDiv.classList.remove('d-none');
                progressText.textContent = `Deleting ${documentsToDelete.length} document(s)...`;
                
                try {
                    // Make real AJAX call to backend
                    const requestData = {
                        documentIds: documentsToDelete.map(doc => parseInt(doc.id))
                    };
                    
                    const response = await fetch('/Documents/Index?handler=BulkDelete', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(requestData)
                    });
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const result = await response.json();
                    
                    // Smooth progress bar animation to 100%
                    progressBar.style.transition = 'width 0.5s ease';
                    progressBar.style.width = '100%';
                    
                    if (result.success) {
                        // Handle successful deletion
                        if (result.isFullySuccessful) {
                            progressText.textContent = `Successfully deleted all ${result.successfulDeletions} document(s)!`;
                        } else if (result.hasPartialFailure) {
                            progressText.textContent = `Partially successful: ${result.successfulDeletions} of ${result.totalRequested} document(s) deleted.`;
                        } else {
                            progressText.textContent = `No documents were deleted. Please check permissions.`;
                        }
                        
                        // Wait a moment to show success message, then close and update UI
                        setTimeout(() => {
                            const modal = bootstrap.Modal.getInstance(document.getElementById('bulkDeleteModal'));
                            modal.hide();
                            
                            // Dynamic UI updates instead of page refresh
                            if (result.successfulDeletions > 0) {
                                updateUIAfterBulkDelete(result);
                            }
                        }, 2000);
                        
                    } else {
                        // Handle error from backend
                        progressText.textContent = `Error: ${result.error || 'Unknown error occurred'}`;
                        progressBar.classList.add('bg-danger');
                        
                        // Re-enable button for retry
                        setTimeout(() => {
                            confirmBtn.disabled = false;
                            spinner.classList.add('d-none');
                            icon.classList.remove('d-none');
                            btnText.textContent = 'Retry Deletion';
                        }, 2000);
                    }
                    
                } catch (error) {
                    console.error('Bulk delete error:', error);
                    progressText.textContent = `Network error: ${error.message}`;
                    progressBar.classList.add('bg-danger');
                    
                    // Re-enable button for retry
                    setTimeout(() => {
                        confirmBtn.disabled = false;
                        spinner.classList.add('d-none');
                        icon.classList.remove('d-none');
                        btnText.textContent = 'Retry Deletion';
                    }, 2000);
                }
            });
            // Enhanced table row hover effects
            document.querySelectorAll('.azure-table-row').forEach(function(row) {
                row.addEventListener('mouseenter', function() {
                    this.style.backgroundColor = '#f8f9fa';
                    this.style.transition = 'background-color 0.15s ease';
                });
                
                row.addEventListener('mouseleave', function() {
                    this.style.backgroundColor = '';
                });
            });

            // Delete form loading state
            const deleteForm = document.getElementById('deleteForm');
            if (deleteForm) {
                deleteForm.addEventListener('submit', function() {
                    const loadingBtn = deleteForm.querySelector('.loading-btn');
                    if (loadingBtn) {
                        const spinner = loadingBtn.querySelector('.spinner-border');
                        const btnText = loadingBtn.querySelector('.btn-text');
                        const icon = loadingBtn.querySelector('.bi');
                        
                        spinner.classList.remove('d-none');
                        if (icon) icon.classList.add('d-none');
                        if (btnText) btnText.textContent = 'Deleting...';
                        loadingBtn.disabled = true;
                    }
                });
            }
            // Move document logic
            const moveModal = document.getElementById('moveModal');
            if(moveModal){
                let selectedDocId = null;
                moveModal.addEventListener('show.bs.modal', function(event){
                    const button = event.relatedTarget;
                    selectedDocId = button.getAttribute('data-document-id');
                    document.getElementById('moveDocumentId').value = selectedDocId;
                });

                document.getElementById('confirmMoveBtn').addEventListener('click', async function(){
                    const btn = this;
                    const spinner = btn.querySelector('.spinner-border');
                    const btnText = btn.querySelector('.btn-text');
                    btn.disabled = true;
                    spinner.classList.remove('d-none');

                    const isBulk = window.bulkMoveIds && window.bulkMoveIds.length > 0;
                    
                    try{
                        let response;
                        if(isBulk){
                            // Bulk move operation
                            const payload = {
                                documentIds: window.bulkMoveIds.map(id=>parseInt(id)),
                                projectId: document.getElementById('moveProjectSelect').value ? parseInt(document.getElementById('moveProjectSelect').value):null,
                                folderId: document.getElementById('moveFolderSelect').value ? parseInt(document.getElementById('moveFolderSelect').value):null
                            };
                            response = await fetch('/Documents/Index?handler=BulkMove',{
                                method:'POST', 
                                headers:{'Content-Type':'application/json','RequestVerificationToken':document.querySelector('input[name="__RequestVerificationToken"]').value},
                                body:JSON.stringify(payload)
                            });
                        } else {
                            // Single document move operation
                            const requestPayload = {
                                documentId: parseInt(document.getElementById('moveDocumentId').value),
                                projectId: document.getElementById('moveProjectSelect').value ? parseInt(document.getElementById('moveProjectSelect').value) : null,
                                folderId: document.getElementById('moveFolderSelect').value ? parseInt(document.getElementById('moveFolderSelect').value) : null
                            };
                            response = await fetch('/Documents/Index?handler=Move', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                },
                                body: JSON.stringify(requestPayload)
                            });
                        }

                        const result = await response.json();
                        if(result.success){
                            window.location.reload();
                        } else {
                            alert(result.error || 'Move failed');
                        }
                    } catch(err){
                        console.error(err);
                        alert('Network error');
                    } finally {
                        spinner.classList.add('d-none');
                        btn.disabled = false;
                        btnText.textContent = 'Move';
                    }
                });

                document.getElementById('moveProjectSelect').addEventListener('change', async function(){
                    const projectId = this.value;
                    const folderSelect = document.getElementById('moveFolderSelect');
                    // Clear existing options except first
                    folderSelect.options.length = 0;
                    const defaultOpt = new Option('None', '');
                    folderSelect.add(defaultOpt);
                    if(!projectId){
                        return;
                    }
                    try{
                        const resp = await fetch(`/Documents/Index?handler=Folders&projectId=${projectId}`);
                        const data = await resp.json();
                        if(data.success){
                            data.folders.forEach(f => {
                               const opt = new Option(f.name, f.id);
                               folderSelect.add(opt);
                            });
                        }
                    }catch(err){ console.error(err); }
                });
            }
            document.getElementById('bulkMoveBtn').addEventListener('click', function(){
                const selected = Array.from(document.querySelectorAll('.document-checkbox:checked')).map(cb=>cb.value);
                if(selected.length===0){ alert('No documents selected'); return; }
                window.bulkMoveIds = selected;
                // reset modal fields
                document.getElementById('moveProjectSelect').value='';
                const folderSel = document.getElementById('moveFolderSelect');
                folderSel.options.length = 0; folderSel.add(new Option('None',''));
                const modal = new bootstrap.Modal(document.getElementById('moveModal'));
                modal.show();
            });


        });
    </script>
    
    <style>
        .azure-filter-panel {
            border-radius: 8px;
            background: #ffffff;
        }
        
                 .azure-table-container {
             border-radius: 8px;
             overflow: visible;
         }
         
         .azure-table {
             font-size: 0.9rem;
             table-layout: fixed;
             width: 100%;
         }
        
        .azure-table thead th {
            background-color: #f8f9fa !important;
            font-weight: 600;
            padding: 12px 16px;
        }
        
        .azure-table tbody td {
            padding: 16px;
            vertical-align: middle;
        }
        
        .azure-table-row:hover {
            background-color: #f8f9fa !important;
        }
        
        .azure-empty-state {
            padding: 3rem 1rem;
            background: #ffffff;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }
        
        .page-transition {
            animation: fadeIn 0.3s ease-in;
        }
        
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .dropdown-toggle::after {
            display: none;
        }
        
        .badge {
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .form-check-sm .form-check-input {
            margin-top: 0.125rem;
        }
        
                 .btn-sm {
             font-size: 0.8rem;
         }
         
         .min-width-0 {
             min-width: 0;
         }
         
         .text-truncate {
             overflow: hidden;
             text-overflow: ellipsis;
             white-space: nowrap;
         }
         
         .azure-table td {
             position: relative;
         }
         
         .dropdown-menu {
             z-index: 1050;
         }
         
         .sortable a {
             cursor: pointer;
         }
         
         .sortable a:hover {
             color: #495057 !important;
         }
         
         .workspace-badge {
             max-width: 120px;
             overflow: hidden;
             text-overflow: ellipsis;
             white-space: nowrap;
             display: inline-block;
         }
         
         .azure-filter-panel .form-control,
         .azure-filter-panel .form-select {
             border: 1px solid #ced4da;
             border-radius: 6px;
         }
         
         .azure-filter-panel .form-control:focus,
         .azure-filter-panel .form-select:focus {
             border-color: #86b7fe;
             box-shadow: 0 0 0 0.25rem rgb(13 110 253 / 25%);
         }
         
         /* Enhanced UX Animations */
         .document-row-exit {
             animation: slideOutLeft 0.5s ease forwards;
         }
         
         @@keyframes slideOutLeft {
             from {
                 opacity: 1;
                 transform: translateX(0);
             }
             to {
                 opacity: 0;
                 transform: translateX(-20px);
             }
         }
         
         .progress-bar {
             transition: width 0.3s ease, background-color 0.3s ease;
         }
         
         .progress-bar.bg-danger {
             animation: pulseError 2s ease-in-out;
         }
         
         @@keyframes pulseError {
             0%, 100% { opacity: 1; }
             50% { opacity: 0.7; }
         }
         
         .toast {
             animation: slideInRight 0.3s ease;
         }
         
         @@keyframes slideInRight {
             from {
                 opacity: 0;
                 transform: translateX(100%);
             }
             to {
                 opacity: 1;
                 transform: translateX(0);
             }
         }
         
         .bulk-action-bar {
             transition: all 0.3s ease;
             animation: slideInDown 0.3s ease;
         }
         
         @@keyframes slideInDown {
             from {
                 opacity: 0;
                 transform: translateY(-10px);
             }
             to {
                 opacity: 1;
                 transform: translateY(0);
             }
         }
         
         .azure-table-row {
             transition: background-color 0.15s ease, transform 0.15s ease;
         }
         
         .azure-table-row:hover {
             transform: translateY(-1px);
             box-shadow: 0 2px 4px rgba(0,0,0,0.1);
         }
         
         /* Fix dropdown z-index issues */
         .dropdown {
             position: relative;
         }
         
         .dropdown-menu {
             z-index: 1050 !important;
         }
         
         .azure-table-row {
             position: relative;
         }
         
         .azure-table-row.dropdown-open {
             z-index: 1040;
         }
    </style>
} 