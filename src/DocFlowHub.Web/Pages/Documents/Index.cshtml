@page
@using DocFlowHub.Web.Extensions
@model DocFlowHub.Web.Pages.Documents.IndexModel
@{
    ViewData["Title"] = "Documents";
}

<div class="documents-container">
    <!-- Modern Page Header -->
    <div class="documents-page-header">
        <div class="page-header-content">
            <div class="page-header-info">
                <h1 class="page-title">
                    <div class="page-icon">üìÑ</div>
                    Documents
                </h1>
                <p class="page-subtitle">Manage and organize your documents with modern workflows</p>
            </div>
            <div class="page-header-actions">
                <a asp-page="./Upload" class="modern-btn modern-btn-primary">
                    <i class="bi bi-cloud-upload"></i>
                    <span>Upload Document</span>
                </a>
            </div>
        </div>
    </div>

    <!-- Document Stats Grid -->
    <div class="documents-stats-grid">
        <div class="documents-stat-card blue">
            <div class="documents-stat-header">
                <div class="documents-stat-info">
                    <h3>Total Documents</h3>
                    <div class="documents-stat-number">@Model.Documents.TotalItems</div>
                    <div class="documents-stat-change">@Model.Documents.Items.Count() shown</div>
                </div>
                <div class="documents-stat-icon">üìÑ</div>
            </div>
        </div>

        <div class="documents-stat-card green">
            <div class="documents-stat-header">
                <div class="documents-stat-info">
                    <h3>My Documents</h3>
                    <div class="documents-stat-number">@Model.Documents.Items.Count(d => d.OwnerId == User.GetUserId())</div>
                    <div class="documents-stat-change">owned by you</div>
                </div>
                <div class="documents-stat-icon">üë§</div>
            </div>
        </div>

        <div class="documents-stat-card cyan">
            <div class="documents-stat-header">
                <div class="documents-stat-info">
                    <h3>Team Documents</h3>
                    <div class="documents-stat-number">@Model.Documents.Items.Count(d => !string.IsNullOrEmpty(d.TeamName))</div>
                    <div class="documents-stat-change">shared documents</div>
                </div>
                <div class="documents-stat-icon">üë•</div>
            </div>
        </div>

        <div class="documents-stat-card yellow">
            <div class="documents-stat-header">
                <div class="documents-stat-info">
                    <h3>File Types</h3>
                    <div class="documents-stat-number">@Model.Documents.Items.Select(d => d.FileType).Distinct().Count()</div>
                    <div class="documents-stat-change">different formats</div>
                </div>
                <div class="documents-stat-icon">üóÇÔ∏è</div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="modern-alert modern-alert-danger">
            <i class="bi bi-exclamation-circle"></i>
            <span>@Model.ErrorMessage</span>
            <button type="button" class="modern-alert-close" data-bs-dismiss="alert">
                <i class="bi bi-x"></i>
            </button>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="modern-alert modern-alert-success">
            <i class="bi bi-check-circle"></i>
            <span>@TempData["SuccessMessage"]</span>
            <button type="button" class="modern-alert-close" data-bs-dismiss="alert">
                <i class="bi bi-x"></i>
            </button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="modern-alert modern-alert-danger">
            <i class="bi bi-exclamation-triangle"></i>
            <span>@TempData["ErrorMessage"]</span>
            <button type="button" class="modern-alert-close" data-bs-dismiss="alert">
                <i class="bi bi-x"></i>
            </button>
        </div>
    }

    <!-- Enhanced Filter Panel -->
    <div class="documents-filter-card">
        <div class="filter-card-header">
            <h3 class="filter-title">
                <i class="bi bi-funnel"></i>
                Filter & Search
            </h3>
            <p class="filter-subtitle">Find your documents quickly</p>
        </div>
        
        <form method="get" class="filter-form">
            <div class="filter-grid">
                <!-- Search -->
                <div class="filter-group">
                        <label asp-for="Filter.SearchTerm" class="filter-label">
                        <i class="bi bi-search"></i>Search Documents
                        </label>
                        <input asp-for="Filter.SearchTerm" class="filter-input" 
                               placeholder="Search by title, description...">
                </div>

                <!-- Team Filter -->
                @if (Model.UserTeams != null && Model.UserTeams.Any())
                {
                    <div class="filter-group">
                            <label asp-for="Filter.TeamId" class="filter-label">
                            <i class="bi bi-building"></i>Workspace
                            </label>
                            <select asp-for="Filter.TeamId" class="filter-select">
                                <option value="">All Documents</option>
                                <option value="0" selected="@(Model.Filter.TeamId == 0)">My Private Documents</option>
                                @foreach (var team in Model.UserTeams)
                                {
                                    <option value="@team.Id" selected="@(Model.Filter.TeamId == team.Id)">
                                        @team.Name (@team.MemberCount members)
                                    </option>
                                }
                            </select>
                    </div>
                }

                <!-- Categories -->
                @if (Model.Categories != null && Model.Categories.Any())
                {
                    <div class="filter-group">
                            <label class="filter-label">
                            <i class="bi bi-tags"></i>Category
                            </label>
                            <select asp-for="Filter.CategoryId" class="filter-select">
                                <option value="">All Categories</option>
                                @foreach (var category in Model.Categories)
                                {
                                    <option value="@category.Id" selected="@(Model.Filter.CategoryId == category.Id)">
                                        @category.Name
                                    </option>
                                }
                            </select>
                    </div>
                }

                <!-- Project Filter -->
                <div class="filter-group">
                        <label asp-for="ProjectId" class="filter-label">
                        <i class="bi bi-kanban"></i>Project
                        </label>
                        <select asp-for="ProjectId" asp-items="Model.ProjectSelectList" class="filter-select" onchange="this.form.submit();">
                            <option value="">All Projects</option>
                            <option value="0" selected="@(Model.ProjectId == 0)">Unassigned</option>
                        </select>
                </div>

                <!-- Folder Filter -->
                <div class="filter-group">
                        <label asp-for="FolderId" class="filter-label">
                        <i class="bi bi-folder"></i>Folder
                        </label>
                        <select asp-for="FolderId" asp-items="Model.FolderSelectList" class="filter-select"></select>
                    </div>
                </div>

                <!-- Filter Actions -->
                    <div class="filter-actions">
                        <button type="submit" class="modern-btn modern-btn-primary">
                    <i class="bi bi-search"></i>
                    <span>Apply Filters</span>
                        </button>
                        <a asp-page="./Index" class="modern-btn modern-btn-outline">
                    <i class="bi bi-arrow-clockwise"></i>
                    <span>Clear All</span>
                        </a>
            </div>
        </form>
    </div>

    <!-- Documents Content -->
    @if (!Model.Documents.Items.Any())
    {
        <div class="documents-empty-state">
            <div class="empty-state-content">
                <div class="empty-state-icon">üìÇ</div>
                <h3 class="empty-state-title">No documents found</h3>
                <p class="empty-state-subtitle">Try adjusting your filters or upload your first document to get started</p>
                <div class="empty-state-actions">
                    <a asp-page="./Upload" class="modern-btn modern-btn-primary">
                        <i class="bi bi-cloud-upload"></i>
                        <span>Upload Document</span>
                    </a>
                    <a asp-page="./Index" class="modern-btn modern-btn-outline">
                        <i class="bi bi-arrow-clockwise"></i>
                        <span>Clear Filters</span>
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Results Summary -->
        <div class="results-summary-card">
            <div class="results-info">
                <i class="bi bi-list-ul"></i>
                <span>Showing <strong>@Model.Documents.Items.Count()</strong> of <strong>@Model.Documents.TotalItems</strong> documents</span>
            </div>
            <div class="page-info">
                <i class="bi bi-file-earmark"></i>
                <span>Page <strong>@Model.Documents.PageNumber</strong> of <strong>@Model.Documents.TotalPages</strong></span>
            </div>
        </div>

        <!-- Enhanced Bulk Action Bar -->
        <div id="bulkActionBar" class="bulk-action-card d-none">
            <div class="bulk-action-content">
                <div class="bulk-action-info">
                    <div class="bulk-action-icon">‚úì</div>
                    <div class="bulk-action-text">
                        <span id="selectedCount" class="bulk-count">0 documents selected</span>
                        <small class="bulk-subtitle">Choose an action below</small>
                    </div>
                </div>
                <div class="bulk-action-buttons">
                    <button type="button" id="clearSelectionBtn" class="action-btn clear">
                        <i class="bi bi-x-lg"></i>
                        <span>Clear</span>
                    </button>
                    <button type="button" id="bulkMoveBtn" class="action-btn move">
                        <i class="bi bi-arrows-move"></i>
                        <span>Move</span>
                    </button>
                    <button type="button" id="bulkDeleteBtn" class="action-btn delete">
                        <i class="bi bi-trash"></i>
                        <span>Delete</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Enhanced Documents Table -->
        <div class="documents-table-card">
            <div class="table-card-header">
                <div class="table-header-info">
                    <h3 class="table-title">
                        <i class="bi bi-table"></i>
                        Documents List
                    </h3>
                    <p class="table-subtitle">Manage your document collection</p>
                </div>
                <div class="table-actions">
                    <button class="table-action-btn" title="Refresh" onclick="window.location.reload()">
                        <i class="bi bi-arrow-clockwise"></i>
                    </button>
                    <button class="table-action-btn" title="View options">
                        <i class="bi bi-three-dots"></i>
                    </button>
                </div>
            </div>
            
            <div class="modern-table-container">
                <table class="modern-table">
                    <thead>
                        <tr>
                            <!-- Selection Column -->
                            <th class="select-column">
                                <input type="checkbox" id="selectAll" class="modern-checkbox" title="Select all documents">
                            </th>
                            <th class="document-column sortable">
                                <a href="@Model.GetSortUrl("Title", ViewData["TitleSortDirection"]?.ToString() ?? "asc")" class="table-sort-link">
                                    <i class="bi bi-file-earmark"></i>
                                    <span>Document</span>
                                    @if (ViewData["CurrentSort"]?.ToString() == "Title")
                                    {
                                        <i class="bi bi-caret-@(ViewData["TitleSortDirection"]?.ToString() == "desc" ? "down" : "up")-fill"></i>
                                    }
                                </a>
                            </th>
                            <th class="workspace-column d-none d-md-table-cell">
                                <i class="bi bi-building"></i>
                                <span>Workspace</span>
                            </th>
                            <th class="modified-column sortable d-none d-lg-table-cell">
                                <a href="@Model.GetSortUrl("UpdatedAt", ViewData["UpdatedAtSortDirection"]?.ToString() ?? "desc")" class="table-sort-link">
                                    <i class="bi bi-clock"></i>
                                    <span>Modified</span>
                                    @if (ViewData["CurrentSort"]?.ToString() == "UpdatedAt")
                                    {
                                        <i class="bi bi-caret-@(ViewData["UpdatedAtSortDirection"]?.ToString() == "desc" ? "down" : "up")-fill"></i>
                                    }
                                </a>
                            </th>
                            <th class="size-column sortable d-none d-xl-table-cell">
                                <a href="@Model.GetSortUrl("FileSize", ViewData["FileSizeSortDirection"]?.ToString() ?? "desc")" class="table-sort-link">
                                    <i class="bi bi-hdd"></i>
                                    <span>Size</span>
                                    @if (ViewData["CurrentSort"]?.ToString() == "FileSize")
                                    {
                                        <i class="bi bi-caret-@(ViewData["FileSizeSortDirection"]?.ToString() == "desc" ? "down" : "up")-fill"></i>
                                    }
                                </a>
                            </th>
                            <th class="actions-column">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var document in Model.Documents.Items)
                        {
                            <tr class="modern-table-row">
                                <!-- Document Selection -->
                                <td class="select-cell">
                                    <input type="checkbox" class="modern-checkbox document-checkbox" 
                                           value="@document.Id" data-title="@document.Title" data-size="@FormatFileSize(document.FileSize)" data-date="@document.CreatedAt.ToString("MMM dd, yyyy")">
                                </td>

                                <!-- Document Info -->
                                <td class="document-cell">
                                    <div class="document-info">
                                        <div class="document-icon @GetFileIconClass(document.FileType)">
                                            <i class="bi @GetFileIcon(document.FileType)"></i>
                                        </div>
                                        <div class="document-details">
                                            <div class="document-title">@document.Title</div>
                                            @if (!string.IsNullOrEmpty(document.Description))
                                            {
                                                <div class="document-description">
                                                    @(document.Description.Length > 80 ? document.Description.Substring(0, 80) + "..." : document.Description)
                                                </div>
                                            }
                                            <!-- Mobile-only info -->
                                            <div class="document-mobile-info d-md-none">
                                                @if (!string.IsNullOrEmpty(document.TeamName))
                                                {
                                                    <span class="document-badge team">
                                                        <i class="bi bi-people"></i>@document.TeamName
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="document-badge private">
                                                        <i class="bi bi-lock"></i>Private
                                                    </span>
                                                }
                                                <span class="document-date">@((document.UpdatedAt ?? document.CreatedAt).ToString("MMM dd"))</span>
                                            </div>
                                            @if (document.Categories != null && document.Categories.Any())
                                            {
                                                <div class="document-categories">
                                                    @foreach (var category in document.Categories.Take(2))
                                                    {
                                                        <span class="category-tag">@category.Name</span>
                                                    }
                                                    @if (document.Categories.Count > 2)
                                                    {
                                                        <span class="category-tag more">+@(document.Categories.Count - 2)</span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </td>

                                <!-- Workspace -->
                                <td class="workspace-cell d-none d-md-table-cell">
                                    @if (!string.IsNullOrEmpty(document.TeamName))
                                    {
                                        <span class="workspace-badge team" title="@document.TeamName">
                                            <i class="bi bi-people"></i>
                                            <span>@(document.TeamName.Length > 12 ? document.TeamName.Substring(0, 12) + "..." : document.TeamName)</span>
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="workspace-badge private">
                                            <i class="bi bi-lock"></i>
                                            <span>Private</span>
                                        </span>
                                    }
                                </td>

                                <!-- Modified -->
                                <td class="modified-cell d-none d-lg-table-cell">
                                    <div class="modified-info">
                                        <div class="modified-date">@((document.UpdatedAt ?? document.CreatedAt).ToString("MMM dd, yyyy"))</div>
                                        <div class="modified-by">by @document.OwnerName</div>
                                    </div>
                                </td>

                                <!-- Size -->
                                <td class="size-cell d-none d-xl-table-cell">
                                    <div class="size-info">
                                        <div class="file-size">@FormatFileSize(document.FileSize)</div>
                                        <div class="file-type">@document.FileType.ToUpper()</div>
                                    </div>
                                </td>

                                <!-- Actions -->
                                <td class="actions-cell">
                                    <div class="dropdown">
                                        <button class="action-dropdown-btn" type="button" data-bs-toggle="dropdown">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end modern-dropdown">
                                            <li>
                                                <a class="dropdown-item" asp-page="./Details" asp-route-id="@document.Id">
                                                    <i class="bi bi-eye"></i>
                                                    <span>View Details</span>
                                                </a>
                                            </li>
                                            @if (document.OwnerId == User.GetUserId())
                                            {
                                                <li>
                                                    <a class="dropdown-item" asp-page="./Edit" asp-route-id="@document.Id">
                                                        <i class="bi bi-pencil"></i>
                                                        <span>Edit</span>
                                                    </a>
                                                </li>
                                                <li>
                                                    <button type="button" class="dropdown-item text-danger" 
                                                                        onclick="confirmDeleteDocument(@document.Id, @Html.Raw(Json.Serialize(document.Title)), '@FormatFileSize(document.FileSize)', '@document.CreatedAt.ToString("MMM dd, yyyy")')">
                                                        <i class="bi bi-trash"></i>
                                                        <span>Delete</span>
                                                    </button>
                                                </li>
                                                <li>
                                                    <button type="button" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#moveModal" data-document-id="@document.Id">
                                                        <i class="bi bi-arrows-angle-right"></i>
                                                        <span>Move</span>
                                                    </button>
                                                </li>
                                            }
                                            <li><hr class="dropdown-divider"></li>
                                            <li>
                                                <form method="post" asp-page-handler="Download" asp-route-documentId="@document.Id" class="d-inline">
                                                    <button type="submit" class="dropdown-item text-success">
                                                        <i class="bi bi-download"></i>
                                                        <span>Download</span>
                                                    </button>
                                                </form>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Enhanced Pagination -->
        @if (Model.Documents.TotalPages > 1)
        {
            <div class="pagination-container">
                <nav class="pagination-nav">
                    <ul class="modern-pagination">
                        @if (Model.Documents.PageNumber > 1)
                        {
                            <li class="pagination-item">
                                <a asp-page="./Index" asp-route-pageNumber="@(Model.Documents.PageNumber - 1)" class="pagination-link prev">
                                    <i class="bi bi-chevron-left"></i>
                                    <span>Previous</span>
                                </a>
                            </li>
                        }
                        
                        @for (var i = Math.Max(1, Model.Documents.PageNumber - 2); i <= Math.Min(Model.Documents.TotalPages, Model.Documents.PageNumber + 2); i++)
                        {
                            <li class="pagination-item">
                                <a asp-page="./Index" asp-route-pageNumber="@i" 
                                   class="pagination-link @(i == Model.Documents.PageNumber ? "active" : "")">@i</a>
                            </li>
                        }
                        
                        @if (Model.Documents.PageNumber < Model.Documents.TotalPages)
                        {
                            <li class="pagination-item">
                                <a asp-page="./Index" asp-route-pageNumber="@(Model.Documents.PageNumber + 1)" class="pagination-link next">
                                    <span>Next</span>
                                    <i class="bi bi-chevron-right"></i>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        }
    }
</div>

<!-- Modern Bulk Delete Modal -->
<div class="modal fade" id="bulkDeleteModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content modern-modal">
            <div class="modal-header">
                <h5 class="modal-title text-danger">
                    <i class="bi bi-exclamation-triangle"></i>
                    Confirm Bulk Document Deletion
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="modern-alert modern-alert-danger">
                    <i class="bi bi-warning"></i>
                    <strong>This action cannot be undone!</strong>
                </div>
                
                <p>Are you sure you want to delete <strong><span id="bulkDeleteCount"></span></strong> documents?</p>
                
                <div class="modern-card">
                    <h6 class="mb-3">Documents to be deleted:</h6>
                    <div class="bulk-delete-list">
                        <div id="bulkDeleteList"></div>
                    </div>
                </div>
                
                <div id="bulkDeleteProgress" class="d-none">
                    <div class="modern-progress">
                        <div class="modern-progress-bar" role="progressbar" style="width: 0%"></div>
                    </div>
                    <small class="progress-text">
                        <span id="bulkProgressText">Preparing deletion...</span>
                    </small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="modern-btn modern-btn-outline" data-bs-dismiss="modal">
                    <i class="bi bi-x-lg"></i>
                    <span>Cancel</span>
                </button>
                <button type="button" id="confirmBulkDelete" class="modern-btn modern-btn-danger">
                    <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                    <i class="bi bi-trash"></i>
                    <span class="btn-text">Delete All Documents</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modern Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content modern-modal">
            <div class="modal-header">
                <h5 class="modal-title text-danger">
                    <i class="bi bi-exclamation-triangle"></i>
                    Confirm Document Deletion
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="modern-alert modern-alert-danger">
                    <i class="bi bi-warning"></i>
                    <strong>This action cannot be undone!</strong>
                </div>
                
                <p>Are you sure you want to delete this document?</p>
                
                <div class="modern-card">
                    <h6 id="deleteDocumentTitle"></h6>
                    <div class="delete-document-info">
                        <div class="info-item">
                            <strong>Size:</strong> <span id="deleteDocumentSize"></span>
                        </div>
                        <div class="info-item">
                            <strong>Created:</strong> <span id="deleteDocumentDate"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="modern-btn modern-btn-outline" data-bs-dismiss="modal">
                    <i class="bi bi-x-lg"></i>
                    <span>Cancel</span>
                </button>
                <form method="post" asp-page-handler="Delete" class="d-inline" id="deleteForm">
                    <input type="hidden" id="deleteDocumentId" name="documentId" />
                    <button type="submit" class="modern-btn modern-btn-danger loading-btn">
                        <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                        <i class="bi bi-trash"></i>
                        <span class="btn-text">Delete Document</span>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modern Move Document Modal -->
<div class="modal fade" id="moveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content modern-modal">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-arrows-angle-right"></i>
                    Move Document
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="moveDocumentId" />
                <div class="form-group">
                    <label class="modern-form-label">
                        <i class="bi bi-kanban"></i>Project
                    </label>
                    <select id="moveProjectSelect" class="modern-form-select">
                        <option value="">Keep current</option>
                        <option value="0">Unassigned</option>
                        @foreach (var project in Model.Projects)
                        {
                            <option value="@project.Id">@project.Name</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label class="modern-form-label">
                        <i class="bi bi-folder"></i>Folder (optional)
                    </label>
                    <select id="moveFolderSelect" class="modern-form-select">
                        <option value="">None</option>
                        @foreach (var folder in Model.Folders)
                        {
                            <option value="@folder.Id">@folder.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="modern-btn modern-btn-outline" data-bs-dismiss="modal">
                    <i class="bi bi-x"></i>
                    <span>Cancel</span>
                </button>
                <button type="button" id="confirmMoveBtn" class="modern-btn modern-btn-primary">
                    <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                    <i class="bi bi-arrows-angle-right"></i>
                    <span class="btn-text">Move</span>
                </button>
            </div>
        </div>
    </div>
</div>

@functions {
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }

    private string GetFileIcon(string fileType)
    {
        return fileType.ToLower() switch
        {
            ".pdf" => "bi-file-earmark-pdf",
            ".doc" or ".docx" => "bi-file-earmark-word",
            ".txt" => "bi-file-earmark-text",
            ".md" => "bi-markdown",
            ".jpg" or ".jpeg" or ".png" or ".gif" => "bi-file-earmark-image",
            _ => "bi-file-earmark"
        };
    }

    private string GetFileIconClass(string fileType)
    {
        return fileType.ToLower() switch
        {
            ".pdf" => "pdf-icon",
            ".doc" or ".docx" => "word-icon",
            ".txt" => "text-icon",
            ".md" => "markdown-icon",
            ".jpg" or ".jpeg" or ".png" or ".gif" => "image-icon",
            _ => ""
        };
    }
}

@section Scripts {
    <script>
        // Confirm delete document function
        function confirmDeleteDocument(documentId, title, size, createdDate) {
            document.getElementById('deleteDocumentId').value = documentId;
            document.getElementById('deleteDocumentTitle').textContent = title;
            document.getElementById('deleteDocumentSize').textContent = size;
            document.getElementById('deleteDocumentDate').textContent = createdDate;
            
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            deleteModal.show();
        }

        // Initialize bulk selection functionality
        function initializeBulkSelection() {
            const selectAllCheckbox = document.getElementById('selectAll');
            const documentCheckboxes = document.querySelectorAll('.document-checkbox');
            const bulkActionBar = document.getElementById('bulkActionBar');
            const selectedCountSpan = document.getElementById('selectedCount');
            const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
            const clearSelectionBtn = document.getElementById('clearSelectionBtn');

            selectAllCheckbox.addEventListener('change', function() {
                documentCheckboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
                updateBulkActionBar();
            });

            documentCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', updateBulkActionBar);
            });

            clearSelectionBtn.addEventListener('click', function() {
                documentCheckboxes.forEach(checkbox => {
                    checkbox.checked = false;
                });
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
                updateBulkActionBar();
            });

            bulkDeleteBtn.addEventListener('click', function() {
                const selectedCheckboxes = document.querySelectorAll('.document-checkbox:checked');
                const selectedDocuments = Array.from(selectedCheckboxes).map(checkbox => ({
                    id: checkbox.value,
                    title: checkbox.dataset.title,
                    size: checkbox.dataset.size,
                    date: checkbox.dataset.date
                }));
                
                if (selectedDocuments.length > 0) {
                    showBulkDeleteModal(selectedDocuments);
                }
            });

            function updateBulkActionBar() {
                const selectedCheckboxes = document.querySelectorAll('.document-checkbox:checked');
                const count = selectedCheckboxes.length;
                const totalCheckboxes = documentCheckboxes.length;
                
                if (count > 0) {
                    bulkActionBar.classList.remove('d-none');
                    selectedCountSpan.textContent = `${count} document${count > 1 ? 's' : ''} selected`;
                } else {
                    bulkActionBar.classList.add('d-none');
                }
                
                if (count === 0) {
                    selectAllCheckbox.checked = false;
                    selectAllCheckbox.indeterminate = false;
                } else if (count === totalCheckboxes) {
                    selectAllCheckbox.checked = true;
                    selectAllCheckbox.indeterminate = false;
                } else {
                    selectAllCheckbox.checked = false;
                    selectAllCheckbox.indeterminate = true;
                }
            }
        }

        function showBulkDeleteModal(selectedDocuments) {
            if (!selectedDocuments || selectedDocuments.length === 0) return;
            
            document.getElementById('bulkDeleteCount').textContent = 
                `${selectedDocuments.length} document${selectedDocuments.length > 1 ? 's' : ''}`;
            
            const listContainer = document.getElementById('bulkDeleteList');
            listContainer.innerHTML = selectedDocuments.map(doc => `
                <div class="bulk-delete-item">
                    <div class="bulk-item-info">
                        <div class="bulk-item-title">${escapeHtml(doc.title)}</div>
                        <div class="bulk-item-meta">${doc.size} ‚Ä¢ Created ${doc.date}</div>
                    </div>
                    <div class="bulk-item-icon">
                        <i class="bi bi-file-earmark"></i>
                    </div>
                </div>
            `).join('');
            
            document.getElementById('bulkDeleteProgress').classList.add('d-none');
            const confirmBtn = document.getElementById('confirmBulkDelete');
            const spinner = confirmBtn.querySelector('.spinner-border');
            const btnText = confirmBtn.querySelector('.btn-text');
            const icon = confirmBtn.querySelector('.bi');
            
            confirmBtn.disabled = false;
            spinner.classList.add('d-none');
            icon.classList.remove('d-none');
            btnText.textContent = `Delete All Documents`;
            
            window.bulkDeleteDocuments = selectedDocuments;
            
            const modal = new bootstrap.Modal(document.getElementById('bulkDeleteModal'));
            modal.show();
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function updateUIAfterBulkDelete(result) {
            result.results.forEach(item => {
                if (item.success) {
                    const checkbox = document.querySelector(`.document-checkbox[value="${item.documentId}"]`);
                    if (checkbox) {
                        const row = checkbox.closest('tr');
                        if (row) {
                            row.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                            row.style.opacity = '0';
                            row.style.transform = 'translateX(-20px)';
                            
                            setTimeout(() => {
                                row.remove();
                                const remainingRows = document.querySelectorAll('.modern-table-row');
                                if (remainingRows.length === 0) {
                                    showEmptyState();
                                }
                            }, 500);
                        }
                    }
                }
            });

            setTimeout(() => {
                clearAllSelections();
                showSuccessToast(result);
            }, 100);
        }

        function clearAllSelections() {
            const selectAllCheckbox = document.getElementById('selectAll');
            const documentCheckboxes = document.querySelectorAll('.document-checkbox');
            const bulkActionBar = document.getElementById('bulkActionBar');
            
            if (selectAllCheckbox) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
            }
            
            documentCheckboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            
            if (bulkActionBar) {
                bulkActionBar.classList.add('d-none');
            }
        }

        function showEmptyState() {
            const tableContainer = document.querySelector('.modern-table-container');
            if (tableContainer) {
                tableContainer.innerHTML = `
                    <div class="documents-empty-state">
                        <div class="empty-state-content">
                            <div class="empty-state-icon">üìÇ</div>
                            <h3 class="empty-state-title">No documents found</h3>
                            <p class="empty-state-subtitle">All documents have been successfully deleted.</p>
                            <div class="empty-state-actions">
                                <a href="./Upload" class="modern-btn modern-btn-primary">
                                    <i class="bi bi-cloud-upload"></i>
                                    <span>Upload New Document</span>
                                </a>
                            </div>
                        </div>
                    </div>
                `;
            }
        }

        function showSuccessToast(result) {
            const toastHtml = `
                <div class="toast align-items-center text-white bg-success border-0 position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999;" role="alert">
                    <div class="d-flex">
                        <div class="toast-body">
                            <i class="bi bi-check-circle"></i>
                            ${getSuccessMessage(result)}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" 
                                data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', toastHtml);
            
            const toastElement = document.body.lastElementChild;
            const toast = new bootstrap.Toast(toastElement, { delay: 4000 });
            toast.show();
            
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }

        function getSuccessMessage(result) {
            if (result.isFullySuccessful) {
                return `Successfully deleted ${result.successfulDeletions} document${result.successfulDeletions > 1 ? 's' : ''}!`;
            } else if (result.hasPartialFailure) {
                return `Partially successful: ${result.successfulDeletions} of ${result.totalRequested} documents deleted.`;
            } else {
                return 'Bulk delete operation completed.';
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            initializeBulkSelection();
            
            document.getElementById('confirmBulkDelete').addEventListener('click', async function() {
                const documentsToDelete = window.bulkDeleteDocuments;
                if (!documentsToDelete || documentsToDelete.length === 0) return;
                
                const confirmBtn = this;
                const spinner = confirmBtn.querySelector('.spinner-border');
                const btnText = confirmBtn.querySelector('.btn-text');
                const icon = confirmBtn.querySelector('.bi');
                
                confirmBtn.disabled = true;
                spinner.classList.remove('d-none');
                icon.classList.add('d-none');
                btnText.textContent = 'Deleting...';
                
                const progressDiv = document.getElementById('bulkDeleteProgress');
                const progressBar = progressDiv.querySelector('.modern-progress-bar');
                const progressText = document.getElementById('bulkProgressText');
                progressDiv.classList.remove('d-none');
                progressText.textContent = `Deleting ${documentsToDelete.length} document(s)...`;
                
                try {
                    const requestData = {
                        documentIds: documentsToDelete.map(doc => parseInt(doc.id))
                    };
                    
                    const response = await fetch('/Documents/Index?handler=BulkDelete', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(requestData)
                    });
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const result = await response.json();
                    
                    progressBar.style.transition = 'width 0.5s ease';
                    progressBar.style.width = '100%';
                    
                    if (result.success) {
                        if (result.isFullySuccessful) {
                            progressText.textContent = `Successfully deleted all ${result.successfulDeletions} document(s)!`;
                        } else if (result.hasPartialFailure) {
                            progressText.textContent = `Partially successful: ${result.successfulDeletions} of ${result.totalRequested} document(s) deleted.`;
                        } else {
                            progressText.textContent = `No documents were deleted. Please check permissions.`;
                        }
                        
                        setTimeout(() => {
                            const modal = bootstrap.Modal.getInstance(document.getElementById('bulkDeleteModal'));
                            modal.hide();
                            
                            if (result.successfulDeletions > 0) {
                                updateUIAfterBulkDelete(result);
                            }
                        }, 2000);
                        
                    } else {
                        progressText.textContent = `Error: ${result.error || 'Unknown error occurred'}`;
                        progressBar.classList.add('bg-danger');
                        
                        setTimeout(() => {
                            confirmBtn.disabled = false;
                            spinner.classList.add('d-none');
                            icon.classList.remove('d-none');
                            btnText.textContent = 'Retry Deletion';
                        }, 2000);
                    }
                    
                } catch (error) {
                    console.error('Bulk delete error:', error);
                    progressText.textContent = `Network error: ${error.message}`;
                    progressBar.classList.add('bg-danger');
                    
                    setTimeout(() => {
                        confirmBtn.disabled = false;
                        spinner.classList.add('d-none');
                        icon.classList.remove('d-none');
                        btnText.textContent = 'Retry Deletion';
                    }, 2000);
                }
            });

            const deleteForm = document.getElementById('deleteForm');
            if (deleteForm) {
                deleteForm.addEventListener('submit', function() {
                    const loadingBtn = deleteForm.querySelector('.loading-btn');
                    if (loadingBtn) {
                        const spinner = loadingBtn.querySelector('.spinner-border');
                        const btnText = loadingBtn.querySelector('.btn-text');
                        const icon = loadingBtn.querySelector('.bi');
                        
                        spinner.classList.remove('d-none');
                        if (icon) icon.classList.add('d-none');
                        if (btnText) btnText.textContent = 'Deleting...';
                        loadingBtn.disabled = true;
                    }
                });
            }

            const moveModal = document.getElementById('moveModal');
            if(moveModal){
                let selectedDocId = null;
                moveModal.addEventListener('show.bs.modal', function(event){
                    const button = event.relatedTarget;
                    selectedDocId = button.getAttribute('data-document-id');
                    document.getElementById('moveDocumentId').value = selectedDocId;
                });

                document.getElementById('confirmMoveBtn').addEventListener('click', async function(){
                    const btn = this;
                    const spinner = btn.querySelector('.spinner-border');
                    const btnText = btn.querySelector('.btn-text');
                    btn.disabled = true;
                    spinner.classList.remove('d-none');

                    const isBulk = window.bulkMoveIds && window.bulkMoveIds.length > 0;
                    
                    try{
                        let response;
                        if(isBulk){
                            const payload = {
                                documentIds: window.bulkMoveIds.map(id=>parseInt(id)),
                                projectId: document.getElementById('moveProjectSelect').value ? parseInt(document.getElementById('moveProjectSelect').value):null,
                                folderId: document.getElementById('moveFolderSelect').value ? parseInt(document.getElementById('moveFolderSelect').value):null
                            };
                            response = await fetch('/Documents/Index?handler=BulkMove',{
                                method:'POST', 
                                headers:{'Content-Type':'application/json','RequestVerificationToken':document.querySelector('input[name="__RequestVerificationToken"]').value},
                                body:JSON.stringify(payload)
                            });
                        } else {
                            const requestPayload = {
                                documentId: parseInt(document.getElementById('moveDocumentId').value),
                                projectId: document.getElementById('moveProjectSelect').value ? parseInt(document.getElementById('moveProjectSelect').value) : null,
                                folderId: document.getElementById('moveFolderSelect').value ? parseInt(document.getElementById('moveFolderSelect').value) : null
                            };
                            response = await fetch('/Documents/Index?handler=Move', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                },
                                body: JSON.stringify(requestPayload)
                            });
                        }

                        const result = await response.json();
                        if(result.success){
                            window.location.reload();
                        } else {
                            alert(result.error || 'Move failed');
                        }
                    } catch(err){
                        console.error(err);
                        alert('Network error');
                    } finally {
                        spinner.classList.add('d-none');
                        btn.disabled = false;
                        btnText.textContent = 'Move';
                    }
                });

                document.getElementById('moveProjectSelect').addEventListener('change', async function(){
                    const projectId = this.value;
                    const folderSelect = document.getElementById('moveFolderSelect');
                    folderSelect.options.length = 0;
                    const defaultOpt = new Option('None', '');
                    folderSelect.add(defaultOpt);
                    if(!projectId){
                        return;
                    }
                    try{
                        const resp = await fetch(`/Documents/Index?handler=Folders&projectId=${projectId}`);
                        const data = await resp.json();
                        if(data.success){
                            data.folders.forEach(f => {
                               const opt = new Option(f.name, f.id);
                               folderSelect.add(opt);
                            });
                        }
                    }catch(err){ console.error(err); }
                });
            }

            document.getElementById('bulkMoveBtn').addEventListener('click', function(){
                const selected = Array.from(document.querySelectorAll('.document-checkbox:checked')).map(cb=>cb.value);
                if(selected.length===0){ alert('No documents selected'); return; }
                window.bulkMoveIds = selected;
                document.getElementById('moveProjectSelect').value='';
                const folderSel = document.getElementById('moveFolderSelect');
                folderSel.options.length = 0; folderSel.add(new Option('None',''));
                const modal = new bootstrap.Modal(document.getElementById('moveModal'));
                modal.show();
            });
        });
    </script>
    
    <style>
        /* Modern Documents Container */
        .documents-container {
            padding: 32px;
            max-width: 100vw;
            overflow-x: hidden;
        }

        /* Page Header */
        .documents-page-header {
            background: var(--surface-primary);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid var(--border-primary);
            border-radius: 20px;
            padding: 32px;
            margin-bottom: 32px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
        }

        .page-header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 24px;
        }

        .page-header-info .page-title {
            font-size: 36px;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .page-icon {
            font-size: 40px;
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .page-subtitle {
            font-size: 16px;
            color: var(--text-secondary);
            margin: 0;
        }

        /* Enhanced Modern Button Styling */
        .modern-btn {
            padding: 10px 20px;
            font-size: 14px;
            font-weight: 600;
            border-radius: 10px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .page-header-actions .modern-btn {
            padding: 12px 24px;
            border-radius: 12px;
        }

        .modern-btn-primary {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            box-shadow: 0 6px 20px rgba(16, 185, 129, 0.25);
            border: none;
        }

        .modern-btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.35);
            color: white;
            background: linear-gradient(135deg, #34d399, #10b981);
        }

        /* Theme-specific overrides for primary buttons */
        [data-theme="light"] .modern-btn-primary {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            box-shadow: 0 6px 20px rgba(16, 185, 129, 0.3);
        }

        [data-theme="light"] .modern-btn-primary:hover {
            background: linear-gradient(135deg, #34d399, #10b981);
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
        }

        [data-theme="dark"] .modern-btn-primary {
            background: linear-gradient(135deg, #34d399, #10b981);
            color: white;
            box-shadow: 0 6px 20px rgba(52, 211, 153, 0.3);
        }

        [data-theme="dark"] .modern-btn-primary:hover {
            background: linear-gradient(135deg, #6ee7b7, #34d399);
            box-shadow: 0 8px 25px rgba(110, 231, 183, 0.4);
        }

        .modern-btn-outline {
            background: transparent;
            color: #6b7280;
            border: 2px solid #d1d5db;
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .modern-btn-outline:hover {
            background: rgba(16, 185, 129, 0.1);
            color: #10b981;
            border-color: #10b981;
            transform: translateY(-1px);
            box-shadow: 0 6px 16px rgba(16, 185, 129, 0.15);
        }

        /* Theme-specific overrides for outline buttons */
        [data-theme="light"] .modern-btn-outline {
            background: #ffffff;
            color: #374151;
            border-color: #d1d5db;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        }

        [data-theme="light"] .modern-btn-outline:hover {
            background: rgba(16, 185, 129, 0.05);
            color: #10b981;
            border-color: #10b981;
        }

        [data-theme="dark"] .modern-btn-outline {
            background: rgba(255, 255, 255, 0.05);
            color: rgba(255, 255, 255, 0.8);
            border-color: rgba(255, 255, 255, 0.2);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        [data-theme="dark"] .modern-btn-outline:hover {
            background: rgba(52, 211, 153, 0.1);
            color: #34d399;
            border-color: #34d399;
        }

        /* Filter Actions Specific Styling */
        .filter-actions {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            align-items: center;
        }

        .filter-actions .modern-btn {
            min-width: 130px;
            justify-content: center;
        }

        .filter-actions .modern-btn i {
            font-size: 16px;
        }



        /* Document Stats Grid - Improved Responsive Layout */
        .documents-stats-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 24px;
            margin-bottom: 32px;
        }

        .documents-stat-card {
            background: var(--surface-primary);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid var(--border-primary);
            border-radius: 16px;
            padding: 24px;
            position: relative;
            overflow: hidden;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            min-height: 120px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .documents-stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--accent-color);
        }

        .documents-stat-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 30px 80px rgba(0, 0, 0, 0.12);
        }

        .documents-stat-card.blue {
            --accent-color: #3b82f6;
        }

        .documents-stat-card.green {
            --accent-color: #10b981;
        }

        .documents-stat-card.cyan {
            --accent-color: #06b6d4;
        }

        .documents-stat-card.yellow {
            --accent-color: #f59e0b;
        }

        .documents-stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .documents-stat-info h3 {
            font-size: 14px;
            font-weight: 500;
            color: var(--text-secondary);
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .documents-stat-number {
            font-size: 36px;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 4px;
        }

        .documents-stat-change {
            font-size: 12px;
            color: var(--text-muted);
        }

        .documents-stat-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            background: linear-gradient(135deg, var(--accent-color), color-mix(in srgb, var(--accent-color) 80%, transparent));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
        }

        /* Modern Alerts */
        .modern-alert {
            background: var(--surface-primary);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid var(--border-primary);
            border-radius: 12px;
            padding: 16px 20px;
            margin-bottom: 24px;
            display: flex;
            align-items: center;
            gap: 12px;
            position: relative;
            overflow: hidden;
        }

        .modern-alert::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            background: var(--alert-color);
        }

        .modern-alert-success {
            --alert-color: #10b981;
            border-left-color: var(--alert-color);
        }

        .modern-alert-danger {
            --alert-color: #ef4444;
            border-left-color: var(--alert-color);
        }

        .modern-alert i {
            color: var(--alert-color);
            font-size: 18px;
        }

        .modern-alert span {
            flex: 1;
            color: var(--text-primary);
            font-weight: 500;
        }

        .modern-alert-close {
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
            transition: all 0.2s ease;
        }

        .modern-alert-close:hover {
            background: var(--surface-hover);
            color: var(--text-primary);
        }

        /* Enhanced Filter Card */
        .documents-filter-card {
            background: var(--surface-primary);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid var(--border-primary);
            border-radius: 16px;
            padding: 24px;
            margin-bottom: 24px;
            box-shadow: var(--shadow-glass);
            position: relative;
        }

        /* Dark theme base styling using design system variables */
        [data-theme="dark"] .documents-filter-card,
        html[data-theme="dark"] .documents-filter-card,
        body[data-theme="dark"] .documents-filter-card {
            background: var(--surface-primary) !important;
            backdrop-filter: blur(20px) !important;
            -webkit-backdrop-filter: blur(20px) !important;
            border-color: var(--border-color) !important;
            box-shadow: var(--shadow-glass) !important;
        }

        .filter-card-header {
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 1px solid var(--border-secondary);
        }

        .filter-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 4px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .filter-subtitle {
            font-size: 14px;
            color: var(--text-secondary);
            margin: 0;
        }

        .filter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 24px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-label {
            font-size: 12px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 6px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .filter-input,
        .filter-select {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid var(--border-secondary);
            border-radius: 8px;
            background: var(--surface-secondary);
            color: var(--text-primary);
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .filter-input:focus,
        .filter-select:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px var(--accent-light);
            background: var(--surface-primary);
        }

        /* Dark theme filter styling - Using proper design system variables */
        [data-theme="dark"] .documents-filter-card {
            background: var(--surface-primary) !important;
            backdrop-filter: blur(20px) !important;
            -webkit-backdrop-filter: blur(20px) !important;
            border-color: var(--border-color) !important;
            box-shadow: var(--shadow-glass) !important;
        }

        [data-theme="dark"] .documents-filter-card .filter-card-header {
            border-bottom-color: var(--border-color) !important;
        }

        [data-theme="dark"] .documents-filter-card .filter-title {
            color: var(--text-primary) !important;
        }

        [data-theme="dark"] .documents-filter-card .filter-subtitle {
            color: var(--text-secondary) !important;
        }

        [data-theme="dark"] .documents-filter-card .filter-label {
            color: var(--text-secondary) !important;
        }

        [data-theme="dark"] .documents-filter-card .filter-input,
        [data-theme="dark"] .documents-filter-card .filter-select {
            background: var(--surface-secondary) !important;
            border-color: var(--border-color) !important;
            color: var(--text-primary) !important;
        }

        [data-theme="dark"] .documents-filter-card .filter-input:focus,
        [data-theme="dark"] .documents-filter-card .filter-select:focus {
            background: var(--surface-tertiary) !important;
            border-color: var(--accent-color) !important;
            box-shadow: 0 0 0 3px var(--accent-light) !important;
        }

        [data-theme="dark"] .documents-filter-card .filter-input::placeholder {
            color: var(--text-muted) !important;
        }

        /* Additional dark theme support for option elements */
        [data-theme="dark"] .documents-filter-card select option {
            background: var(--surface-secondary) !important;
            color: var(--text-primary) !important;
        }

        /* Alternative dark theme detection methods for broader compatibility */
        html[data-theme="dark"] .documents-filter-card,
        body[data-theme="dark"] .documents-filter-card,
        .dark .documents-filter-card {
            background: var(--surface-primary) !important;
            border-color: var(--border-color) !important;
            box-shadow: var(--shadow-glass) !important;
        }

        html[data-theme="dark"] .documents-filter-card .filter-input,
        html[data-theme="dark"] .documents-filter-card .filter-select,
        body[data-theme="dark"] .documents-filter-card .filter-input,
        body[data-theme="dark"] .documents-filter-card .filter-select,
        .dark .documents-filter-card .filter-input,
        .dark .documents-filter-card .filter-select {
            background: var(--surface-secondary) !important;
            border-color: var(--border-color) !important;
            color: var(--text-primary) !important;
        }

        html[data-theme="dark"] .documents-filter-card .filter-title,
        body[data-theme="dark"] .documents-filter-card .filter-title,
        .dark .documents-filter-card .filter-title {
            color: var(--text-primary) !important;
        }

        html[data-theme="dark"] .documents-filter-card .filter-subtitle,
        body[data-theme="dark"] .documents-filter-card .filter-subtitle,
        .dark .documents-filter-card .filter-subtitle {
            color: var(--text-secondary) !important;
        }

        html[data-theme="dark"] .documents-filter-card .filter-label,
        body[data-theme="dark"] .documents-filter-card .filter-label,
        .dark .documents-filter-card .filter-label {
            color: var(--text-secondary) !important;
        }

        .filter-actions {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        /* Empty State */
        .documents-empty-state {
            background: var(--surface-primary);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid var(--border-primary);
            border-radius: 16px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
            min-height: 400px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .empty-state-content {
            text-align: center;
            max-width: 400px;
            padding: 40px;
        }

        .empty-state-icon {
            font-size: 64px;
            opacity: 0.6;
            margin-bottom: 24px;
            color: var(--text-muted);
        }

        .empty-state-title {
            font-size: 24px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 12px;
        }

        .empty-state-subtitle {
            font-size: 16px;
            color: var(--text-secondary);
            margin-bottom: 32px;
        }

        .empty-state-actions {
            display: flex;
            gap: 16px;
            justify-content: center;
            flex-wrap: wrap;
        }

        /* Results Summary */
        .results-summary-card {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
            padding: 16px 20px;
            background: var(--surface-secondary);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid var(--border-secondary);
            border-radius: 12px;
            font-size: 14px;
            color: var(--text-secondary);
        }

        .results-info,
        .page-info {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        /* Enhanced Bulk Action Bar */
        .bulk-action-card {
            background: linear-gradient(135deg, #10b981, #059669);
            border: 1px solid #10b981;
            border-radius: 12px;
            padding: 16px 20px;
            margin-bottom: 16px;
            box-shadow: 0 12px 40px color-mix(in srgb, #10b981 25%, transparent);
            animation: slideInDown 0.3s ease;
        }

        .bulk-action-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 16px;
        }

        .bulk-action-info {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .bulk-action-icon {
            font-size: 24px;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .bulk-action-text {
            color: white;
        }

        .bulk-count {
            font-weight: 600;
            font-size: 16px;
        }

        .bulk-subtitle {
            display: block;
            opacity: 0.8;
            font-size: 12px;
        }

        .bulk-action-buttons {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        .action-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 8px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .action-btn.clear {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

        .action-btn.move {
            background: rgba(59, 130, 246, 0.3);
            color: white;
        }

        .action-btn.delete {
            background: rgba(239, 68, 68, 0.3);
            color: white;
        }

        .action-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        /* Enhanced Table */
        .documents-table-card {
            background: var(--surface-primary);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid var(--border-primary);
            border-radius: 16px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 24px;
        }

        .table-card-header {
            padding: 20px 24px;
            border-bottom: 1px solid var(--border-secondary);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(0, 0, 0, 0.02);
            flex-wrap: wrap;
            gap: 16px;
        }

        .table-header-info .table-title {
            font-size: 16px;
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .table-subtitle {
            font-size: 12px;
            color: var(--text-secondary);
            margin: 0;
        }

        .table-actions {
            display: flex;
            gap: 8px;
        }

        .table-action-btn {
            width: 32px;
            height: 32px;
            border: none;
            background: var(--surface-secondary);
            border-radius: 8px;
            color: var(--text-secondary);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .table-action-btn:hover {
            background: var(--surface-hover);
            color: var(--text-primary);
        }

        .modern-table-container {
            overflow-x: auto;
        }

        .modern-table {
            width: 100%;
            border-collapse: collapse;
            margin: 0;
        }

        .modern-table thead th {
            padding: 16px 20px;
            text-align: left;
            font-size: 12px;
            font-weight: 600;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-bottom: 1px solid var(--border-secondary);
            background: var(--surface-secondary);
        }

        .modern-table tbody td {
            padding: 16px 20px;
            border-bottom: 1px solid var(--border-light);
            color: var(--text-primary);
        }

        .modern-table-row {
            transition: all 0.2s ease;
        }

        .modern-table-row:hover {
            background: var(--surface-hover);
        }

        .select-column {
            width: 50px;
            text-align: center;
        }

        .document-column {
            width: 40%;
        }

        .workspace-column {
            width: 15%;
        }

        .modified-column {
            width: 20%;
        }

        .size-column {
            width: 10%;
        }

        .actions-column {
            width: 10%;
            text-align: center;
        }

        .table-sort-link {
            color: var(--text-secondary);
            text-decoration: none;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: color 0.3s ease;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .table-sort-link:hover {
            color: var(--text-primary);
        }

        /* Checkbox Styling */
        .modern-checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid #d1d5db;
            border-radius: 8px;
            background: #ffffff;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            display: inline-block;
            flex-shrink: 0;
        }

        .modern-checkbox:checked {
            background: linear-gradient(135deg, #10b981, #059669);
            border-color: #10b981;
            transform: scale(1.05);
        }

        .modern-checkbox:checked::after {
            content: '‚úì';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 12px;
            font-weight: bold;
        }

        .modern-checkbox:indeterminate {
            background: linear-gradient(135deg, #10b981, #059669);
            border-color: #10b981;
        }

        .modern-checkbox:indeterminate::after {
            content: '‚àí';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 14px;
            font-weight: bold;
        }

        .modern-checkbox:hover {
            border-color: #10b981;
            box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.15);
        }

        /* Dark mode checkbox styling */
        [data-theme="dark"] .modern-checkbox {
            background: #374151;
            border-color: #6b7280;
        }

        [data-theme="dark"] .modern-checkbox:checked {
            background: linear-gradient(135deg, #34d399, #10b981);
            border-color: #34d399;
        }

        [data-theme="dark"] .modern-checkbox:indeterminate {
            background: linear-gradient(135deg, #34d399, #10b981);
            border-color: #34d399;
        }

        [data-theme="dark"] .modern-checkbox:hover {
            border-color: #34d399;
            box-shadow: 0 0 0 3px rgba(52, 211, 153, 0.15);
        }

        /* Table cell styling for checkboxes */
        .select-cell {
            text-align: center;
            vertical-align: middle;
            width: 50px;
        }

        /* Document Info Styling */
        .document-info {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .document-icon {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 18px;
            flex-shrink: 0;
            box-shadow: 0 2px 8px rgba(59, 130, 246, 0.2);
        }

        /* PDF Files - Red */
        .document-icon .bi-file-earmark-pdf {
            color: #ffffff;
            parent-background: linear-gradient(135deg, #ef4444, #dc2626);
            parent-shadow: 0 2px 8px rgba(239, 68, 68, 0.2);
        }

        /* Word Documents - Blue */
        .document-icon .bi-file-earmark-word {
            color: #ffffff;
            parent-background: linear-gradient(135deg, #2563eb, #1d4ed8);
            parent-shadow: 0 2px 8px rgba(37, 99, 235, 0.2);
        }

        /* Text Files - Cyan */
        .document-icon .bi-file-earmark-text {
            color: #ffffff;
            parent-background: linear-gradient(135deg, #06b6d4, #0891b2);
            parent-shadow: 0 2px 8px rgba(6, 182, 212, 0.2);
        }

        /* Markdown Files - Purple */
        .document-icon .bi-markdown {
            color: #ffffff;
            parent-background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            parent-shadow: 0 2px 8px rgba(139, 92, 246, 0.2);
        }

        /* Image Files - Purple */
        .document-icon .bi-file-earmark-image {
            color: #ffffff;
            parent-background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            parent-shadow: 0 2px 8px rgba(139, 92, 246, 0.2);
        }

        /* Generic Files - Default Blue */
        .document-icon .bi-file-earmark {
            color: #ffffff;
        }

        /* Dynamic styling with JavaScript-like approach using CSS */
        .document-icon.pdf-icon {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            box-shadow: 0 2px 8px rgba(239, 68, 68, 0.2);
        }

        .document-icon.word-icon {
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            box-shadow: 0 2px 8px rgba(37, 99, 235, 0.2);
        }

        .document-icon.text-icon {
            background: linear-gradient(135deg, #06b6d4, #0891b2);
            box-shadow: 0 2px 8px rgba(6, 182, 212, 0.2);
        }

        .document-icon.markdown-icon {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            box-shadow: 0 2px 8px rgba(139, 92, 246, 0.2);
        }

        .document-icon.image-icon {
            background: linear-gradient(135deg, #10b981, #059669);
            box-shadow: 0 2px 8px rgba(16, 185, 129, 0.2);
        }

        /* Dark theme adjustments */
        [data-theme="dark"] .document-icon {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        }

        [data-theme="dark"] .document-icon.pdf-icon {
            box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
        }

        [data-theme="dark"] .document-icon.word-icon {
            box-shadow: 0 2px 8px rgba(37, 99, 235, 0.3);
        }

        [data-theme="dark"] .document-icon.text-icon {
            box-shadow: 0 2px 8px rgba(6, 182, 212, 0.3);
        }

        [data-theme="dark"] .document-icon.markdown-icon {
            box-shadow: 0 2px 8px rgba(139, 92, 246, 0.3);
        }

        [data-theme="dark"] .document-icon.image-icon {
            box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
        }

        .document-details {
            flex-grow: 1;
            min-width: 0;
        }

        .document-title {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 4px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .document-description {
            font-size: 12px;
            color: var(--text-muted);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .document-mobile-info {
            margin-top: 8px;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .document-categories {
            margin-top: 8px;
            display: flex;
            gap: 4px;
            flex-wrap: wrap;
        }

        .category-tag {
            font-size: 10px;
            padding: 2px 8px;
            background: var(--primary);
            color: white;
            border-radius: 12px;
            font-weight: 500;
        }

        .category-tag.more {
            background: var(--text-muted);
        }

        .document-badge,
        .workspace-badge {
            font-size: 11px;
            padding: 4px 8px;
            border-radius: 6px;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }

        .document-badge.team,
        .workspace-badge.team {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .document-badge.private,
        .workspace-badge.private {
            background: var(--text-muted);
            color: white;
        }

        .document-date {
            font-size: 11px;
            color: var(--text-muted);
        }

        .modified-info,
        .size-info {
            text-align: left;
        }

        .modified-date,
        .file-size {
            font-size: 13px;
            color: var(--text-primary);
            font-weight: 500;
        }

        .modified-by,
        .file-type {
            font-size: 11px;
            color: var(--text-muted);
        }

        .action-dropdown-btn {
            width: 32px;
            height: 32px;
            border: none;
            background: var(--surface-secondary);
            border-radius: 8px;
            color: var(--text-secondary);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .action-dropdown-btn:hover {
            background: var(--surface-hover);
            color: var(--text-primary);
        }

        /* Modern Dropdown */
        .modern-dropdown {
            background: var(--surface-primary);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid var(--border-primary);
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
            padding: 8px;
            min-width: 180px;
        }

        .modern-dropdown .dropdown-item {
            padding: 10px 12px;
            border-radius: 8px;
            font-size: 14px;
            color: var(--text-primary);
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .modern-dropdown .dropdown-item:hover {
            background: var(--surface-hover);
        }

        .modern-dropdown .dropdown-item.text-danger {
            color: #ef4444;
        }

        .modern-dropdown .dropdown-item.text-success {
            color: #10b981;
        }

        /* Enhanced Pagination */
        .pagination-container {
            margin-top: 32px;
            display: flex;
            justify-content: center;
        }

        .pagination-nav {
            background: var(--surface-primary);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid var(--border-primary);
            border-radius: 12px;
            padding: 12px;
        }

        .modern-pagination {
            display: flex;
            gap: 8px;
            padding: 0;
            margin: 0;
            list-style: none;
        }

        .pagination-item {
            display: flex;
        }

        .pagination-link {
            padding: 10px 16px;
            border-radius: 8px;
            background: var(--surface-secondary);
            color: var(--text-secondary);
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            min-width: 44px;
            justify-content: center;
        }

        .pagination-link:hover {
            background: var(--surface-hover);
            color: var(--text-primary);
            transform: translateY(-1px);
        }

        .pagination-link.active {
            background: var(--primary);
            color: white;
            box-shadow: 0 4px 12px color-mix(in srgb, var(--primary) 25%, transparent);
        }

        .pagination-link.prev,
        .pagination-link.next {
            font-size: 14px;
            padding: 10px 20px;
        }

        /* Modern Modal Styling */
        .modern-modal {
            background: var(--surface-primary);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid var(--border-primary);
            border-radius: 16px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
        }

        .modern-modal .modal-header {
            padding: 24px;
            border-bottom: 1px solid var(--border-secondary);
        }

        .modern-modal .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .modern-modal .modal-body {
            padding: 24px;
        }

        .modern-modal .modal-footer {
            padding: 24px;
            border-top: 1px solid var(--border-secondary);
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        .modern-card {
            background: var(--surface-secondary);
            border: 1px solid var(--border-secondary);
            border-radius: 12px;
            padding: 16px;
            margin: 16px 0;
        }

        .modern-card h6 {
            color: var(--text-primary);
            font-weight: 600;
            margin-bottom: 12px;
        }

        .bulk-delete-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .bulk-delete-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid var(--border-light);
        }

        .bulk-delete-item:last-child {
            border-bottom: none;
        }

        .bulk-item-info {
            flex: 1;
            min-width: 0;
        }

        .bulk-item-title {
            font-weight: 500;
            color: var(--text-primary);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .bulk-item-meta {
            font-size: 12px;
            color: var(--text-muted);
        }

        .bulk-item-icon {
            color: var(--text-muted);
            margin-left: 12px;
        }

        .delete-document-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
        }

        .info-item {
            font-size: 12px;
            color: var(--text-muted);
        }

        .modern-progress {
            background: var(--surface-secondary);
            border-radius: 8px;
            height: 8px;
            overflow: hidden;
            margin: 16px 0;
        }

        .modern-progress-bar {
            background: linear-gradient(90deg, var(--primary), var(--primary-dark));
            height: 100%;
            border-radius: 8px;
            transition: width 0.3s ease;
        }

        .progress-text {
            color: var(--text-muted);
            margin-top: 8px;
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .modern-form-label {
            font-size: 14px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .modern-form-select {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid var(--border-secondary);
            border-radius: 8px;
            background: var(--surface-secondary);
            color: var(--text-primary);
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .modern-form-select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px color-mix(in srgb, var(--primary) 10%, transparent);
        }

        .modern-btn-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            border: none;
            box-shadow: 0 8px 32px color-mix(in srgb, #ef4444 25%, transparent);
        }

        .modern-btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 40px color-mix(in srgb, #ef4444 35%, transparent);
            color: white;
        }

        /* Responsive Design */
        /* Large tablets and smaller desktops - 2x2 layout */
        @@media (max-width: 1200px) {
            .documents-stats-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 20px;
            }
        }

        @@media (max-width: 1024px) {
            .documents-container {
                padding: 24px;
            }

            .documents-stats-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 20px;
            }

            .filter-grid {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 16px;
            }

            .page-header-content {
                flex-direction: column;
                text-align: center;
            }

            .results-summary-card {
                flex-direction: column;
                gap: 8px;
                text-align: center;
            }

            .bulk-action-content {
                flex-direction: column;
                text-align: center;
            }

            .bulk-action-buttons {
                justify-content: center;
            }

            .table-card-header {
                flex-direction: column;
                text-align: center;
            }
        }

        /* Tablets - keep 2x2 layout */
        @@media (max-width: 768px) {
            .documents-container {
                padding: 16px;
            }

            .documents-stats-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 16px;
            }
        }

        /* Mobile phones - single column */
        @@media (max-width: 480px) {
            .documents-container {
                padding: 12px;
            }

            .documents-stats-grid {
                grid-template-columns: 1fr;
                gap: 12px;
            }

            .filter-grid {
                grid-template-columns: 1fr;
                gap: 16px;
            }

            .filter-actions {
                flex-direction: column;
            }

            .empty-state-actions {
                flex-direction: column;
            }

            .page-header-info .page-title {
                font-size: 28px;
            }

            .documents-stat-number {
                font-size: 28px;
            }

            .modern-table thead th,
            .modern-table tbody td {
                padding: 12px 16px;
            }

            .pagination-link {
                padding: 8px 12px;
                font-size: 14px;
            }

            .pagination-link.prev,
            .pagination-link.next {
                padding: 8px 16px;
            }
        }

        /* Animation */
        @@keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
} 