@page
@model DocFlowHub.Web.Pages.Admin.Settings.IndexModel
@{
    ViewData["Title"] = "System Settings";
    ViewData["ActivePage"] = "Settings";
    Layout = "_AdminLayout";
}

<div class="row mb-4">
    <div class="col">
        <h2>@ViewData["Title"]</h2>
        <p class="text-muted">Configure application settings and preferences.</p>
    </div>
</div>

@if (!string.IsNullOrEmpty(Model.SuccessMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="bi bi-check-circle me-2"></i>@Model.SuccessMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
}

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>@Model.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}
    
<form method="post" asp-page-handler="UpdateSettings">
    <div class="row">
        @foreach (var group in Model.SettingsGroups)
        {
    <div class="col-md-6 mb-4">
        <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                            @switch (group.Category)
                            {
                                case "AI":
                                    <i class="bi bi-robot me-2"></i>
                                    break;
                                case "Security":
                                    <i class="bi bi-shield-check me-2"></i>
                                    break;
                                case "Performance":
                                    <i class="bi bi-speedometer2 me-2"></i>
                                    break;
                                case "System":
                                    <i class="bi bi-gear me-2"></i>
                                    break;
                                default:
                                    <i class="bi bi-wrench me-2"></i>
                                    break;
                            }
                            @group.Category Settings
                </h5>
                        <button type="submit" asp-page-handler="ResetCategory" asp-route-category="@group.Category" 
                                class="btn btn-outline-secondary btn-sm" 
                                onclick="return confirm('Are you sure you want to reset all @group.Category settings to default values?')">
                            <i class="bi bi-arrow-clockwise"></i> Reset
                </button>
            </div>
            <div class="card-body">
                        @foreach (var setting in group.Settings)
                        {
                <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-start">
                                    <label class="form-label">
                                        @setting.Key.Split('.').Last()
                                        @if (setting.RequiresRestart)
                                        {
                                            <span class="badge bg-warning text-dark ms-1">Restart Required</span>
                                        }
                                        @if (setting.IsSensitive)
                                        {
                                            <span class="badge bg-danger ms-1">Sensitive</span>
                                        }
                        </label>
                                    @if (!string.IsNullOrEmpty(setting.DefaultValue))
                                    {
                                        <button type="submit" asp-page-handler="ResetSetting" asp-route-key="@setting.Key"
                                                class="btn btn-outline-secondary btn-sm" 
                                                onclick="return confirm('Reset @setting.Key to default value?')">
                                            <i class="bi bi-arrow-clockwise"></i>
                                        </button>
                                    }
                </div>
                
                                @switch (setting.DataType.ToUpper())
                                {
                                    case "BOOLEAN":
                                        <select class="form-select" name="SettingsRequest.Settings[@setting.Key]">
                                            <option value="true" selected="@(setting.Value.ToLower() == "true")">True</option>
                                            <option value="false" selected="@(setting.Value.ToLower() == "false")">False</option>
                                        </select>
                                        break;
                                    case "NUMBER":
                                        <input type="number" class="form-control" 
                                               name="SettingsRequest.Settings[@setting.Key]" 
                                               value="@setting.Value" 
                                               step="any">
                                        break;
                                    case "JSON":
                                        <textarea class="form-control" rows="3" 
                                                  name="SettingsRequest.Settings[@setting.Key]">@setting.Value</textarea>
                                        break;
                                    default:
                                        if (setting.IsSensitive)
                                        {
                                            <input type="password" class="form-control" 
                                                   name="SettingsRequest.Settings[@setting.Key]" 
                                                   value="@setting.Value">
                                        }
                                        else
                                        {
                                            <input type="text" class="form-control" 
                                                   name="SettingsRequest.Settings[@setting.Key]" 
                                                   value="@setting.Value">
                                        }
                                        break;
                                }
                                
                                @if (!string.IsNullOrEmpty(setting.Description))
                                {
                                    <div class="form-text">@setting.Description</div>
                                }
                                @if (!string.IsNullOrEmpty(setting.DefaultValue))
                                {
                                    <div class="form-text text-muted">Default: @setting.DefaultValue</div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
    
    <div class="row">
        <div class="col-12">
        <div class="card">
                <div class="card-body text-center">
                    <button type="submit" class="btn btn-primary btn-lg me-2">
                        <i class="bi bi-check2"></i> Save All Settings
                    </button>
                    <a href="/Admin" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Admin
                    </a>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        // Auto-save warning for settings that require restart
        document.addEventListener('DOMContentLoaded', function() {
            const restartRequiredInputs = document.querySelectorAll('input[name*="Security"], input[name*="Performance.Upload"]');
            restartRequiredInputs.forEach(input => {
                input.addEventListener('change', function() {
                    if (this.closest('.mb-3').querySelector('.badge.bg-warning')) {
                        this.style.borderColor = '#ffc107';
                        this.style.backgroundColor = '#fff3cd';
                    }
                });
            });
        });
        
        // Form validation
        document.querySelector('form').addEventListener('submit', function(e) {
            const jsonInputs = document.querySelectorAll('textarea[name*="Settings"]');
            let hasErrors = false;
            
            jsonInputs.forEach(input => {
                try {
                    if (input.value.trim()) {
                        JSON.parse(input.value);
                    }
                    input.classList.remove('is-invalid');
                } catch (error) {
                    input.classList.add('is-invalid');
                    hasErrors = true;
                }
            });
            
            if (hasErrors) {
                e.preventDefault();
                alert('Please fix JSON syntax errors before saving.');
                return false;
            }
        });
    </script>
} 